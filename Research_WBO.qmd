---
title: "Monitor Woningbouwopgave"
author: "(Gerrit Versteeg)"
format: 
  dashboard:
    logo: images/Logo_Weert.png
    nav-buttons: [linkedin, github]
    github: "https://github.com/GVersteeg/GemeenteMonitor"

---

```{r housekeeping}
#| label: housekeeping
#| include: false

## --------------------- libraries -----------------------------------------
## std. leaflet versions do NOT work !! ------------------------------------- #
# devtools::install_github("dmurdoch/leaflet@crosstalk4") 
## -------------------------------------------------------------------------- #
# library(usmap)
# library(gridExtra)
# library(mapdeck)
if(!require(pacman)) install.packages("pacman")
pacman::p_load(
  gt, tidyverse, plotly, sf, leaflet, DT,
  reactable, bslib, bsicons, crosstalk,
  htmltools, lubridate, zoo, scales, shiny
  )

## ------------------------------------------------------------------------ #
## ------------------------ fresh slate -----------------------------------
## ------------------------------------------------------------------------ #
rm(list=ls())

## ------------------------------------------------------------------------ #
## -------------------- source external functions -------------------------
## ------------------------------------------------------------------------ #
## (none needed for this script, but can be added if required)

## ------------------------------------------------------------------------ #
## --- Read production parameters -----------------------------------------
## Switch for controling where the script actually runs:                    #
## productieomgeving = RStudio Connect (publication environment)            #
## onderzoeksomgeving = RStudio Server Pro within the production DRO        #
## ontwikkelomgeving = Local development environment outside of DRO         #
## ------------------------------------------------------------------------ #
context <- Sys.getenv("CONTEXT")
ohg <- Sys.getenv("Onderhanden-Gemeente")
ohg_name <- str_split(ohg, pattern = " | ")[[1]][1]
ohg_code <- str_split(ohg, pattern = " | ")[[1]][3]
ohg_gmcd <- paste0("GM", ohg_code)
ohg_path <- str_split(ohg, pattern = " | ")[[1]][5]

## ------------------------------------------------------------------------ #
## ------ Setup locations and filenames -----------------------------------
## ------------------------------------------------------------------------ #
dir_lake <- Sys.getenv("POS_DATALAKE")
dir_lake <- paste0(dir_lake, ohg_name, "/")
dir_proj <- getwd()            
dir_parm <- paste0(dir_proj, "/parameters/")                    ## parameters
dir_pic <- "images/"                ## pictures (loaded from wbo_et/pictures)
dir_luts <- paste0(dir_lake, "luts/")                        ## lookup-tables
  
dir_cln <- paste0(dir_lake, "schone_data/")                     ## clean data
dir_cln_cbs <- paste0(dir_cln, "cbs/")                        ## demographics
dir_cln_geo <- paste0(dir_cln, "geo/")          ## gebiedsgrenzen en stations
dir_cln_onz <- paste0(dir_cln, "onderzoeken/")               ## research data
dir_cln_wbo <- paste0(dir_cln_onz, "wbo_et/")              ## research-folder
dir_cln_evz <- paste0(dir_cln_wbo, "energie/")                 ## energy data
dir_cln_won <- paste0(dir_cln_wbo, "woningen/")
dir_cln_pic <- paste0(dir_cln_wbo, "pictures")         ## source for pictures

fname_cbs_dem <- "cbs_dem_2004_2024.rds"
fpath_cbs_dem <- paste0(dir_cln_cbs, fname_cbs_dem)
fname_geo_brt <- "gebiedsgrenzen.rds"
fpath_geo_brt <- paste0(dir_cln_geo, fname_geo_brt)

fname_geo_lss <- "ls_station.rds"
fpath_geo_lss <- paste0(dir_cln_geo, fname_geo_lss)
fname_geo_mss <- "ms_station.rds"
fpath_geo_mss <- paste0(dir_cln_geo, fname_geo_mss)
fname_geo_lsv <- "ls_verbinding.rds"
fpath_geo_lsv <- paste0(dir_cln_geo, fname_geo_lsv)
fname_geo_msv <- "ms_verbinding.rds"
fpath_geo_msv <- paste0(dir_cln_geo, fname_geo_msv)
fname_geo_hms <- "hs_ms_station.rds"
fpath_geo_hms <- paste0(dir_cln_geo, fname_geo_hms)
fname_geo_mls <- "ms_ls_station.rds"
fpath_geo_mls <- paste0(dir_cln_geo, fname_geo_mls)

fname_scen01 <- "scenarios.rds"
fpath_scen01 <- paste0(dir_cln_wbo, fname_scen01)
fname_demo <- "demografie_gebied.rds"
fpath_demo <- paste0(dir_cln_wbo, fname_demo)
fname_ewt <- "energie_woningtype.rds"
fpath_ewt <- paste0(dir_cln_evz, fname_ewt)
fname_wtb <- "woningtype_buurt.rds"
fpath_wtb <- paste0(dir_cln_won, fname_wtb)

```

```{r copy_pic}
#| label: copy pictures
#| include: false

## ----------------------------------------------------------------------- #
## -- Copy pictures from datalake to folder in working directory because of 
##    possible space in datalake-path. knitr cannot handle this ---------- #
## ----------------------------------------------------------------------- #
flist_pic <- list.files(path = dir_cln_pic, pattern = ".png", 
                    full.names = TRUE, recursive = TRUE)
file.copy(flist_pic, dir_pic, overwrite = TRUE)
rm(flist_pic)

```

```{r read_rds}
#| label: read rds research data
#| include: false

## ----------------------------------------------------------------------- #
## -- step 1a. READ RDS research files ----------------------------------- #
## ----------------------------------------------------------------------- #
sf_brt_cur <- read_rds(fpath_scen01)     ## LUT Buurten binnen Focusgebieden
df_ev_past <- read_rds(fpath_ewt)               ## Energieverbruik per buurt
df_wt_past <- read_rds(fpath_wtb)            ## Aantallen woningen per buurt
df_cbs_past <- read_rds(fpath_cbs_dem)                  ## T.b.v. referentie
df_demo_past <- read_rds(fpath_demo)      ## Woningen, Auto's, MVS per regio

## ----------------------------------------------------------------------- #
## --- SPECIFIC TO WEERT ------------------------------------------------- #
## --correctie wt_past. Mist indeling voor: 0105,0302,0303,1402,2502 ----- #
## -- we will determine percentage for each type across the board and ---- #
## -- then apply to the missing buurten.                              ---- #
## ----------------------------------------------------------------------- #
df_tmp <- df_wt_past %>% 
  filter(!code %in% c("BU09880105", "BU09880302","BU09880303",
                   "BU09881402","BU09882502")) %>% 
  summarise(app = sum(app, na.rm = TRUE),
            tus = sum(tus, na.rm = TRUE),
            hoek = sum(hoek, na.rm = TRUE),
            tkap = sum(tkap, na.rm = TRUE),
            vrij = sum(vrij, na.rm = TRUE),
            koop = sum(koop, na.rm = TRUE),
            huur = sum(huur, na.rm = TRUE),
            tot = sum(tot, na.rm = TRUE)) %>%
  mutate(p_app = app/tot,
         p_tus = tus/tot,
         p_hoek = hoek/tot,
         p_tkap = tkap/tot,
         p_vrij = vrij/tot,
         p_koop = koop/tot,
         p_huur = huur/tot)

df_wt_past <- df_wt_past %>% 
  mutate(
    app = if_else(is.na(app), 
                  round(df_tmp$p_app[1] * tot, digits = 0), app),
    tus = if_else(is.na(tus), 
                  round(df_tmp$p_tus[1] * tot, digits = 0), tus),
    hoek = if_else(is.na(hoek), 
                   round(df_tmp$p_hoek[1] * tot, digits = 0), hoek),
    tkap = if_else(is.na(tkap), 
                   round(df_tmp$p_tkap[1]*tot, digits = 0), tkap),
    vrij = if_else(is.na(vrij), 
                   round(df_tmp$p_vrij[1] * tot, digits = 0), vrij),
    koop = if_else(is.na(koop), 
                   round(df_tmp$p_koop[1] * tot, digits = 0), koop),
    huur = if_else(is.na(huur), 
                   round(df_tmp$p_huur[1] * tot, digits = 0), huur)
    )

## -------------------------------------------------------------------------- #
## --- step 1b. Load GIS-files (stadsdelen, wijken, buurten) ---------------- #
## -------------------------------------------------------------------------- #
# epsg:4326 is the WGS84 World Grid that Leaflet uses. Re-project to this --- #
## -------------------------------------------------------------------------- #
## --- Load buurten_ev (nieuwe buurten voor scenario EV vs. Woningen) ------- #
##   + sf_brt: buurten shapes                                   ------------- #
## --- Load gemeentegrens shape --------------------------------------------- #
##   + sf_gem: gemeentegrens shape                              ------------- #
## --- Load focusgebieden shapes -------------------------------------------- #
##   + sf_foc: focusgebieden                                    ------------- #
## --- Load Enexis Electriciteitstations/Verbindingen shapes    ------------- #
##   + sf_lss: Enexis Laagspanningsstations (2024)              ------------- #
##   + sf_mss: Enexis Middenspanningsstations (2024)            ------------- #
##   + sf_lsv: Enexis Laagspanningsverbindingen (2024)          ------------- #
##   + sf_msv: Enexis Middenspanningsverbindingen (2024)        ------------- #
## -------------------------------------------------------------------------- #
sf_gem <- read_rds(fpath_geo_brt) %>% 
  filter(type == "gemeente")
sf_brt <- read_rds(fpath_geo_brt) %>% 
  filter(type == "buurt")
sf_lss <- read_rds(fpath_geo_lss)  
sf_mss <- read_rds(fpath_geo_mss)  
sf_lsv <- read_rds(fpath_geo_lsv)  
sf_msv <- read_rds(fpath_geo_msv)  
sf_hms <- read_rds(fpath_geo_hms)  
sf_mls <- read_rds(fpath_geo_mls)  

df_scen01_in <- sf_brt_cur %>% 
  st_drop_geometry() %>% 
  select(cbs, strat_extrawoning, need_extrawoning)

```

```{r prep_scen}
#| label: prepare scenarios
#| include: false

## -------------------------------------------------------------------------- #
## Scenario 1: Energiebehoefte versus woningbouw-scenario's ----------------- #
## -------------------------------------------------------------------------- #
## Compose dataframes ------------------------------------------------------- #
## - Data files:                                                ------------- #
##   + df_scen01: per buurt en woningtype:                      ------------- #
##                - gem_el: jr.gem Electriciteitsverbruik       ------------- #
##                - gem_gas: jr.gem Gasverbruik                 ------------- #
##                - aantal: aantal woningen                     ------------- #
##                - tot_el: totaal Electriciteitsverbruik       ------------- #
##                - tot_gas: totaal Gasverbruik                 ------------- #
##                - focus: Indicator focusgebied                ------------- #
##                per buurt:                                    ------------- #
##                - gem_auto: jr.gem Autobezit                  ------------- #
##                - nr_auto_tot: totaal Autobezit               ------------- #
## - Shape files:                                               ------------- #
##   + sf_brt: Buurten (2024)                                   ------------- #
##   + sf_foc: Focusgebieden (2024)                             ------------- #
##   + sf_gem: Gemeentegrens (2024)                             ------------- #
##   + sf_lss: Enexis Laagspanningsstations (2024)              ------------- #
##   + sf_mss: Enexis Middenspanningsstations (2024)            ------------- #
##   + sf_lsv: Enexis Laagspanningsverbindingen (2024)          ------------- #
##   + sf_msv: Enexis Middenspanningsverbindingen (2024)        ------------- #
## -------------------------------------------------------------------------- #
msr_jr <- max(unique(df_ev_past$jaar))     ## last year of measured values -- #
msr_jr_prev <- as.character(as.numeric(msr_jr)-1)       ## last year -/- 1 -- #

## 1. Combine buurt-informatie     ------------------------------------------ #
df_ev_past_2bjoined <- df_ev_past %>%    ## prep. jr.gem EV per brt/wt for join
  select(-koop, -huur) %>% 
  rename(appartement = app,
         tussenwoning = tus,
         hoekwoning = hoek,
         tweekapper = tkap,
         vrijstaand = vrij,
         totaal = tot) %>% 
#  mutate(overig = totaal) %>% 
  pivot_longer(cols = c(totaal, appartement, tussenwoning, hoekwoning,
                        tweekapper, vrijstaand),
               names_to = "won_type", values_to = "verbruik") %>% 
  pivot_wider(id_cols = c(buurt, code, jaar, won_type),
              names_from = verbr_type, values_from = verbruik) %>% 
  arrange(code, jaar, won_type)

df_wt_past_2bjoined <- df_wt_past %>%     ## prepare nr_won per wt/brt for join
  select(-koop, -huur) %>% 
  rename(appartement = app,
         tussenwoning = tus,
         hoekwoning = hoek,
         tweekapper = tkap,
         vrijstaand = vrij,
         totaal = tot) %>% 
  pivot_longer(cols = c(totaal, appartement, tussenwoning, hoekwoning,
                        tweekapper, vrijstaand),
               names_to = "won_type", values_to = "aantal") %>% 
  rename(buurt_wt = buurt) %>% 
  arrange(code, jaar, won_type)

lut_brt_cur_2bjoined <- sf_brt_cur %>%   ## prep indicator focusgebied for join
  st_drop_geometry() %>%
  rename(buurt = brt_naam,
         code = cbs) %>% 
  mutate(focus = (focusnaam != "buitengebied"),
         area = round(as.numeric(area), digits = 0)) %>% 
  select(buurt, code, area, warmtevisie, focus, focusnaam, congestie) %>% 
  arrange(code)

df_area_cur_2bjoined <- lut_brt_cur_2bjoined %>%   ## prepare brt-area for join
  mutate(area_perc =  100 * area/sum(area),
         area_foc = if_else(focus, as.numeric(area), 0),
         area_perc_foc = if_else(focus, 100 * area_foc/sum(area_foc), 0))

df_scen01_past <- df_ev_past_2bjoined %>%     ## join nr_won, gem_el_won, focus
  left_join(df_wt_past_2bjoined) %>%              ## congestie, area, autobezit
  select(-buurt_wt) %>% 
  rename(gem_el_won = el,
         gem_gas_won = gas,
         nr_won = aantal) %>% 
  mutate(tot_el_won = nr_won * gem_el_won,
         tot_gas_won = nr_won * gem_gas_won) %>% 
  left_join(df_area_cur_2bjoined)

rm(df_ev_past_2bjoined,                       ## remove intermediate dataframes
   lut_brt_cur_2bjoined)

## -------------------------------------------------------------------------- #
## Overige datasets (years measured) ---------------------------------------- #
jrn_pre <- as.numeric(unique(df_scen01_past$jaar))    ## period: years measured

## -------------------------------------------------------------------------- #
## Overige datasets (shape file van de buurten in facusgebieden ------------- #
brt_foc <- df_scen01_past$code[df_scen01_past$focus]    ## brt.codes focusgeb'n
sf_brt_foc <- sf_brt[sf_brt$code %in% brt_foc,]        ## grenzen focusgebieden

## -------------------------------------------------------------------------- #
## Setup dataframe met aantal verwachte elektrische auto's ------------------ #
## Nederlandse aantallen gebaseerd op onderzoek PWC ------------------------- #
## -------------------------------------------------------------------------- #
## --- set variables -------------------------------------------------------- #
auto_ev_km <- 0.2                             ## gem. 20 kWh per  100 km ---- #
auto_km_jr <- 11000                                ## gem. km's per jaar ---- #
auto_ev_jr <- auto_km_jr * auto_ev_km      ## gem. jaarverbruik el. auto ---- #

## ---- prepare dataframe for autobezit 2004-2024 per buurt ----------------- #
df_ab_past_brt <- df_demo_past %>% 
  filter(SoortRegio == "Buurt",
         jaar %in% as.character(jrn_pre)) %>% 
  select(Codering, jaar, auto_phh, auto_tot) %>% 
  rename(code = Codering,
         gem_auto_tot = auto_phh,
         nr_auto_tot = auto_tot) %>% 
  arrange(code, jaar)

df_ab_past_jr <- df_ab_past_brt %>%
  group_by(jaar) %>% 
  summarise(gem_auto_tot = mean(gem_auto_tot, na.rm = TRUE),
            nr_auto_tot = sum(nr_auto_tot, na.rm = TRUE))

## -------------------------------------------------------------------------- #
## ---- setup dataframe for elektrische auto's 2004-2050 -------------------- #
## www.rvo.nl/sites/default/files/2021/10/TrendrapportNederlandse-markt-personenautos-2021.pdf
## www.pwc.nl/nl/assets/documents/pwc-onderzoek-elektrisch-rijden.pdf
## nederlandelektrisch.nl/actueel/verkoopcijfers
## EPOL: is extrapolatie terug in de tijd
## IPOL: is intrapolatie tussen bekende waarden in de tijd
## -------------------------------------------------------------------------- #
df_ab_prep_nl <- data.frame(jaar = character(),
                       regio = character(),
                       bron = character(),
                       nr_bs = numeric(),
                       nr_el = numeric(),
                       nr_tot = numeric(),
                       nr_lp = numeric(),
                       stringsAsFactors = FALSE)
df_ab_prep_nl[1,] <- c("2004", "Nederland", "EPOL", NA,   1000,  NA, 300)
df_ab_prep_nl[2,] <- c("2005", "Nederland", "EPOL", NA,   2000,  NA, 600)
df_ab_prep_nl[3,] <- c("2006", "Nederland", "EPOL", NA,   5000,  NA, 1500)
df_ab_prep_nl[4,] <- c("2007", "Nederland", "EPOL", NA,   9000,  NA, 2500)
df_ab_prep_nl[5,] <- c("2008", "Nederland", "EPOL", NA,   14000,  NA, 4500)
df_ab_prep_nl[6,] <- c("2009", "Nederland", "EPOL", NA,   23000,  NA, 7000)
df_ab_prep_nl[7,] <- c("2010", "Nederland", "EPOL", NA,   30500,  NA, 10000)
df_ab_prep_nl[8,] <- c("2011", "Nederland", "EPOL", NA,   43000,  NA, 16000)
df_ab_prep_nl[9,] <- c("2012", "Nederland", "EPOL", NA,   55500,  NA, 26000)
df_ab_prep_nl[10,] <- c("2013", "Nederland", "EPOL", NA,   68000,  NA, 36000)
df_ab_prep_nl[11,] <- c("2014", "Nederland", "EPOL", NA,   80500,  NA, 48000)
df_ab_prep_nl[12,] <- c("2015", "Nederland", "EPOL", NA,   93000,  NA, 60000)
df_ab_prep_nl[13,] <- c("2016", "Nederland", "EPOL", NA,  105500,  NA, 72000)
df_ab_prep_nl[14,] <- c("2017", "Nederland", "NLE", NA,  118000,  NA, 90000)
df_ab_prep_nl[15,] <- c("2018", "Nederland", "NLE", NA,  138000,  NA, 100000)
df_ab_prep_nl[16,] <- c("2019", "Nederland", "NLE", NA,  197000,  NA, 137000)
df_ab_prep_nl[17,] <- c("2020", "Nederland", "NLE", NA,  271000,  NA, 177000)
df_ab_prep_nl[18,] <- c("2021", "Nederland", "PWC, NLE", 8400000,  382000,
                        8800000,  230000)
df_ab_prep_nl[19,] <- c("2030", "Nederland", "PWC", 7500000, 1900000,
                        9400000, 1700000)
df_ab_prep_nl[20,] <- c("2040", "Nederland", "PWC", 4100000, 5900000, 
                        10000000, 3200000)
df_ab_prep_nl[21,] <- c("2050", "Nederland", "PWC",  700000, 9900000, 
                        10600000, 4800000)

## -------------------------------------------------------------------------- #
## ---- completeren dataframe for elektrische auto's 2004-2050 -------------- #
##--  zoo:complete -> add missing rows based on jaar 
##--  zoo:na.approx -> liniar interpolation of values
## -------------------------------------------------------------------------- #
df_ab_all_nl <- df_ab_prep_nl %>% 
  mutate(across(starts_with("nr_"), as.numeric),
         jaar = as.numeric(jaar)) %>% 
  tidyr::complete(jaar = 2004:2050) %>%
  mutate(regio = "Nederland", bron = "IPOL",
         nr_bs = round(na.approx(nr_bs, na.rm = FALSE), -3),
         nr_el = round(na.approx(nr_el, na.rm = FALSE), -3),
         nr_tot = round(na.approx(nr_tot, na.rm = FALSE), -3),
         nr_lp = round(na.approx(nr_lp, na.rm = FALSE), -3))

## ---- verhouding aantal auto's in gemeente versus in NL ref.jaar 2021 ----- #
## ---- 0.27% of cars in NL are in de onderhanden gemeente ------------------ #
fct_autos_gem <- df_ab_past_jr$nr_auto_tot[df_ab_past_jr$jaar == 2021] /
                  df_ab_all_nl$nr_tot[df_ab_all_nl$jaar == 2021]

## ---- adapteer aantallen auto's van nederlandse cijfers naar gemeente ----- #
df_ab_all_gem <- df_ab_all_nl %>%
  mutate(across(starts_with("nr_"), ~ .x * fct_autos_gem)) %>% 
#  mutate(across(starts_with("nr_"), round, digits = 0)) %>%       # deprecated
  mutate(across(starts_with("nr_"), \(x) round(x, digits = 0))) %>% 
  mutate(regio = ohg_name,
         jaar = as.character(jaar))

## replace total number of cars for past years with number from CBS --------- #
##    and subtract nr_el from nr_tot to calulate nr_bs ---------------------- #

for (i in seq_along(jrn_pre)) {
  jr <- as.character(jrn_pre[i])
  df_ab_all_gem$nr_tot[which(df_ab_all_gem$jaar == jr)] <- 
                  df_ab_past_jr$nr_auto_tot[which(df_ab_past_jr$jaar == jr)]
  df_ab_all_gem$nr_bs[which(df_ab_all_gem$jaar == jr)] <- 
                  df_ab_all_gem$nr_tot[which(df_ab_all_gem$jaar == jr)] - 
                  df_ab_all_gem$nr_el[which(df_ab_all_gem$jaar == jr)]
}

## -------------------------------------------------------------------------- #
## -- add data for autobezit (elektrische auto's) 2004-2050 in df_scen01 ---- #
## --   won_type 'totaal' remains (it is used to create rows for won_type     #
## --   'beng' later on in the script).                                       #
## --   We need to distribute the past/future autobezit-data from gemeente    #
## --   to buurt/woningtype. The relevant perc. per year is based on the      #
## --   number of woningen (buurt/woningtype vs. gemeente, each year).        #
## --   Then use that percentage on nr_bs, nr_tot, nr_el, nr_lp               #
## --   Because nr_won for woningtype total also has a row, the sum of        #
## --   woningen per buurt/type each year: We will multiply the perc. by 2.   #
## --   e.g. Disregarding buurt: De total_row itself would have been 50%      #
## --   times 2 = 100%, so the correct autobezit is assigned... also for the  #
## --   other woningtype totals. If we apply buurt as well the mechanism      #
## --   still works                                                                 #
## -------------------------------------------------------------------------- #
df_scen01_past <- df_scen01_past %>% 
  #  filter(won_type != "totaal") %>% 
  left_join(df_ab_all_gem[ , c("jaar", "nr_bs", "nr_el", "nr_tot", "nr_lp")]) %>% 
  rename(nr_auto_bs = nr_bs,
         nr_auto_el = nr_el,
         nr_auto_tot = nr_tot) %>% 
  group_by(jaar) %>% 
  mutate(perc_won = 2 * nr_won/sum(nr_won, na.rm = TRUE)) %>% 
  #  mutate(perc_won = nr_won/sum(nr_won, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(nr_auto_bs = round(nr_auto_bs * perc_won, digits = 0),
         nr_auto_el = round(nr_auto_el * perc_won, digits = 0),
         nr_auto_tot = nr_auto_el + nr_auto_bs,
         nr_lp = round(nr_lp * perc_won, digits = 0)) %>% 
  arrange(code, jaar, won_type)

sum(df_scen01_past$perc_won, na.rm = TRUE)  ## check if perc_won sums to 1

## -------------------------------------------------------------------------- #
## BENG-woningen - Bijna EnergieNeutraal Gebouw ----------------------------- #
## De energiebehoefte van deze woningen ligt iets boven de 50 kWh/m2 -------- #
## terwijl de eis voor BENG 1 bij deze woningen op 76 kWh/m2 ligt. ---------- #
## Dat is 35% lager dan de wettelijke eis. ---------------------------------- #
## -------------------------------------------------------------------------- #
## ---- Elektrisch vervoer --- (PWC, CBS)  ---------------------------------- #
##      Jaar  |  Land (M)              |  Den Haag (k) (3,2% van NL)          #
##      ----  |   BS   EL   Tot Palen  |   BS   EL   Tot  Palen   kWh         #
##      2021  |  8,6  0,2   8,8   0,2  |  270    5   275      7    11         #
##      2030  |  7,5  1,9   9,4   1,7  |  230   60   290     50   132         #
##      2040  |  4,1  5,9  10,0   3,2  |  130  180   310    100   400         #
##      2050  |  0,7  9,9  10,6   4,8  |   20  310   330    150   700         #
## -------------------------------------------------------------------------- #
## --- set variables -------------------------------------------------------- #
beng_ev_m2 <- 76                       ## 50 kWh/m3, minimale eis 76 kWh ---- #
beng_opp <- 71.45                          ## 5430 / 76  (AANNAME, check ---- #
beng_ev_jr <- round(beng_ev_m2 * beng_opp,
                 digits = 0)      ## jr.gem El.Verbruik per BENG-woning ----- #

## -------------------------------------------------------------------------- #
## Setup LUT-table for jaargem, elektriciteitsverbruik BENG-woningen -------- #
## mutate-statement if woningtype "overig" is used binnen BENG -------------- #
  # mutate(opp_EPG_m2 = c(92, 125, 100, 125, 148, 170),
  #        opp_nw_m2 = round(opp_EPG_m2 * 0.75, digits = 0),
  #        gem_el_kwhm2 = round(gem_el_won / opp_nw_m2, digits = 2),
  #        gem_el_beng = opp_nw_m2 * beng_ev_m2,
  #        gem_el_beng_wpomp = c(4150, 5995, 5000, 5160, 5995, 7540),
  #        gem_el_beng_wnet = c(2449, 4342, 4000, 3672, 4342, 5556)) %>% 
## -------------------------------------------------------------------------- #
lut_beng <- df_scen01_past %>% 
  filter(jaar == "2024",
         won_type != "totaal") %>% 
  select(code, buurt, won_type, gem_el_won) %>% 
  group_by(won_type) %>% 
  summarise(gem_el_won = round(mean(gem_el_won, na.rm = TRUE), digits = 0)) %>% 
  ungroup() %>% 
  mutate(opp_EPG_m2 = c(92, 125, 125, 148, 170),
         opp_nw_m2 = round(opp_EPG_m2 * 0.75, digits = 0),
         gem_el_kwhm2 = round(gem_el_won / opp_nw_m2, digits = 2),
         gem_el_beng = opp_nw_m2 * beng_ev_m2,
         gem_el_beng_wpomp = c(4150, 5995, 5160, 5995, 7540),
         gem_el_beng_wnet = c(2449, 4342, 3672, 4342, 5556)) %>% 
  mutate(won_type = case_when(str_detect(won_type, "appa") ~ "app",
                              str_detect(won_type, "hoek") ~ "hkw",
                              str_detect(won_type, "tussen") ~ "tsw",
                              str_detect(won_type, "twee") ~ "twk",
                              str_detect(won_type, "vrij") ~ "vst",
                              str_detect(won_type, "totaal") ~ "tot",
                              TRUE ~ "ovg"))

# write_csv2(df_LUT_beng, "LUT_beng.csv")

```

```{r build_scenarios}
#| label: build scenarios
#| include: false

## -------------------------------------------------------------------------- #
## Scenario's Omgevingsvisie ------------------------------------------------ #
## -------------------------------------------------------------------------- #
##   Energie, woningen en buurten in de scenario's                            #
##      S100 - Strat:  4.500 woningen tot 2040, gemengd stedelijk             #
##      S130 - Need:   6.000 woningen tot 2040, gemengd stedelijk             #
## -------------------------------------------------------------------------- #
## --SCENARIO INPUT FILE  --------------------------------------------------- #
##      - buurt [114]                                                         #
##      - woning-type (app, tsw, hkw, twk, vrs, ovg) [6]                      #
##      - scenario (S100, S130) [2]                                           #
##      - jaar (2040) [1]                                                     #
##      - aantal woningen                                                     #
##      - jaargemiddeld elektriciteitsverbruik kWh                            #
## -------------------------------------------------------------------------- #
## --- read scenario input-file  -------------------------------------------- #
df_scen01_base <- df_scen01_in %>%         ## nr of woningen per buurt/scenario
  rename(code = cbs,
         S100 = strat_extrawoning,
         S130 = need_extrawoning) %>% 
  pivot_longer(-code, names_to = "scenario", values_to = "nr_won") %>% 
  mutate(jaar = ifelse(scenario == "S100", "2040", "2040")) %>% 
  select(jaar, code, scenario, nr_won)

## -------------------------------------------------------------------------- #
## won_type voor de extra woningen moet nog bepaald worden per scenario ----- #
##  we gaan eerst de factor bepalen van won_type op totaal woningen per buurt #
df_wt_cur_brt <- df_wt_past_2bjoined %>%      ## naar #woningen per buurt/type
  filter(jaar == "2024",
         won_type != "totaal") %>% 
  select(- jaar) %>%
  rename(buurt = buurt_wt,
         cur = aantal) %>% 
  mutate(won_type = case_when(str_detect(won_type, "appa") ~ "app",
                              str_detect(won_type, "hoek") ~ "hkw",
                              str_detect(won_type, "tussen") ~ "tsw",
                              str_detect(won_type, "twee") ~ "twk",
                              str_detect(won_type, "vrij") ~ "vst",
                              str_detect(won_type, "totaal") ~ "tot",
                              TRUE ~ "ovg")) %>%
  group_by(code) %>% 
  mutate(fct = cur / sum(cur, na.rm = TRUE),
         cur = replace_na(cur, 0)) %>% 
  ungroup() %>% 
  select(code, won_type, cur, fct) %>% 
  pivot_wider(names_from = won_type, values_from = c(cur, fct))

## -------------------------------------------------------------------------- #
## Even de factoren bepalen van de won_types over alle buurten heen --------- #
df_fct_wt <- df_wt_cur_brt %>% 
  select(code, starts_with("cur_")) %>%
  pivot_longer(-code, names_to = "won_type", values_to = "nr_won") %>% 
  mutate(won_type = str_remove(won_type, "cur_")) %>% 
  group_by(won_type) %>% 
  summarise(nr_won = sum(nr_won, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(fct_won = nr_won / sum(nr_won))

## -------------------------------------------------------------------------- #
## En dan deze perunages gebruiken als een buurt NA's heeft als factor ------ #
df_wt_cur_brt <- df_wt_cur_brt %>% 
  mutate(fct_app = ifelse(is.na(fct_app), 
                          df_fct_wt$fct_won[df_fct_wt$won_type == "app"], fct_app),
         fct_hkw = ifelse(is.na(fct_hkw), 
                          df_fct_wt$fct_won[df_fct_wt$won_type == "hkw"], fct_hkw),
         fct_tsw = ifelse(is.na(fct_tsw), 
                          df_fct_wt$fct_won[df_fct_wt$won_type == "tsw"], fct_tsw),
         fct_twk = ifelse(is.na(fct_twk), 
                          df_fct_wt$fct_won[df_fct_wt$won_type == "twk"], fct_twk),
         fct_vst = ifelse(is.na(fct_vst), 
                          df_fct_wt$fct_won[df_fct_wt$won_type == "vst"], fct_vst))

## -------------------------------------------------------------------------- #
## Daarna gaan we de perunages gebruiken om de extra woningen per buurt te -- #
## verdelen. Voor scenario S100 zijn extra woningtypes cf. buurt, maar voor   #
## scenario S130 worden de extra woningen alleen als appartementen toegevoegd #
df_scen01_base <- df_scen01_base %>%
  left_join(df_wt_cur_brt, by = "code") %>% 
  rename(xtra_tot = nr_won) %>% 
  mutate(xtra_app = ifelse(scenario == "S100", 
                           round(xtra_tot * fct_app, digits = 0), xtra_tot),
         xtra_hkw = ifelse(scenario == "S100", 
                           round(xtra_tot * fct_hkw, digits = 0), 0),
         xtra_tsw = ifelse(scenario == "S100", 
                           round(xtra_tot * fct_tsw, digits = 0), 0),
         xtra_twk = ifelse(scenario == "S100", 
                           round(xtra_tot * fct_twk, digits = 0), 0),
         xtra_vst = ifelse(scenario == "S100", 
                           round(xtra_tot * fct_vst, digits = 0), 0)) %>% 
  select(-starts_with("fct_"), -starts_with("cur"))

## -------------------------------------------------------------------------- #
## --BEPALEN WONINGBOUW OVER DE JAREN VOOR ELKE SCENARIO -------------------- #
## -------------------------------------------------------------------------- #
## --- used variables per scenario
# nr_won       : totaal extra woningen aan einde scenario
# start_scen   : start year of scenario
# end_scen     : end year of scenario
# end_all      : end year of predictions (for now i.e. 2040)
# jrn_pre      : past years (measured)
# jrn_scen     : years during scenario
# post_exists  : does a post scenario period exist (true/false)
# jrn_post     : years after scenario
## --- setup df_addjr 
# add_app      : aantal appartementen per jaar te bouwen per won_type/buurt
## -------------------------------------------------------------------------- #
## Stap 1. opzetten 2010-2021 rows geldend voor alle scenarios  ------------- #
df_scen01_start <- df_wt_past_2bjoined %>% 
  rename(buurt = buurt_wt,
         nr_won = aantal) %>% 
  mutate(won_type = case_when(str_detect(won_type, "appa") ~ "app",
                              str_detect(won_type, "hoek") ~ "hkw",
                              str_detect(won_type, "tussen") ~ "tsw",
                              str_detect(won_type, "twee") ~ "twk",
                              str_detect(won_type, "vrij") ~ "vst",
                              str_detect(won_type, "totaal") ~ "tot",
                              TRUE ~ "ovg")) %>%
  mutate(nr_won = replace_na(nr_won, 0)) %>% 
  select(jaar, code, won_type, nr_won) %>% 
  pivot_wider(names_from = won_type, values_from = nr_won)

## -------------------------------------------------------------------------- #
## --SCENARIO STRATEGIE - S100 ---------------------------------------------- #
##      (4.500 gemengde BENG-woningen over alle buurten, 2040)                #
## -------------------------------------------------------------------------- #
## --- setup variables of scenario
start_scen <- max(as.numeric(df_scen01_past$jaar)) + 1
end_scen <- max(as.numeric(
                df_scen01_base$jaar[df_scen01_base$scenario == "S100"]))
end_all <- 2040
jrn_pre <- as.numeric(unique(df_scen01_past$jaar))
jrn_scen <- c(start_scen:end_scen)
dur_scen <- length(jrn_scen)
post_exists <- ifelse(end_scen >= end_all, FALSE, TRUE)
jrn_past <- NA
if (post_exists) jrn_post <- c((end_scen+1):end_all)

## -------------------------------------------------------------------------- #
## --- setup nr of woningen per type/buurt to add each year
df_addjr <- df_scen01_base %>% 
  filter(scenario == "S100") %>%
  select(-jaar, -scenario) %>% 
  mutate(add_tot = xtra_tot / length(jrn_scen),
         add_app = xtra_app / length(jrn_scen),
         add_hkw = xtra_hkw / length(jrn_scen),
         add_tsw = xtra_tsw / length(jrn_scen),
         add_twk = xtra_twk / length(jrn_scen),
         add_vst = xtra_vst / length(jrn_scen)) %>% 
  select(-starts_with("xtra_"))

## -------------------------------------------------------------------------- #
## --- add rows to dataframe for scenario S100 (part during-scenario) ------- #
## for-loop over scenario years: use the previous year of observations 
## (38 brt'n) to determine new number of woningen per won_type for each buurt
df_scen01_S100 <- df_scen01_start %>% 
  mutate(scenario = "S100")

for (i in seq_along(jrn_scen)) {
  ## prepare variables
  cur_jr <- as.numeric(jrn_scen[i])
  prev_jr <- cur_jr - 1
  ## make new entries for this year based on the previous year
  df_add <- df_scen01_S100 %>%
    filter(jaar == as.character(prev_jr)) %>% 
    rowwise() %>% 
    mutate(jaar = as.character(cur_jr),
           tot = tot + df_addjr$add_tot[df_addjr$code == code],
           app = app + df_addjr$add_app[df_addjr$code == code],
           hkw = hkw + df_addjr$add_hkw[df_addjr$code == code],
           tsw = tsw + df_addjr$add_tsw[df_addjr$code == code],
           twk = twk + df_addjr$add_twk[df_addjr$code == code],
           vst = vst + df_addjr$add_vst[df_addjr$code == code]) %>% 
    ungroup()
  df_scen01_S100 <- bind_rows(df_scen01_S100, df_add)
}

## -------------------------------------------------------------------------- #
## --- add rows to dataframe for scenario S100 (part post-scenario) --------- #
## --- keep the number of woningen per won_type the same (no more building) - #
if (post_exists) {
  for (i in seq_along(jrn_post)) {
    ## prepare variables
    cur_jr <- as.numeric(jrn_post[i])
    prev_jr <- cur_jr - 1
    ## make new entries for this year based on the previous year
    df_add <- df_scen01_S100 %>%
      filter(jaar == as.character(prev_jr)) %>% 
      mutate(jaar = as.character(cur_jr))
    df_scen01_S100 <- bind_rows(df_scen01_S100, df_add)
  }
}

df_scen01_S100 <- df_scen01_S100 %>% 
  select(code, jaar, everything()) %>%
  arrange(code, jaar) %>% 
  mutate(tot = round(tot, digits = 0),
         app = round(app, digits = 0),
         hkw = round(hkw, digits = 0),
         tsw = round(tsw, digits = 0),
         twk = round(twk, digits = 0),
         vst = round(vst, digits = 0))
    
sum(df_scen01_S100$tot[df_scen01_S100$jaar == "2040"])
sum(df_scen01_S100$app[df_scen01_S100$jaar == "2040"])
sum(df_scen01_S100$vst[df_scen01_S100$jaar == "2040"])

## -------------------------------------------------------------------------- #
## --SCENARIO NODIG - S130 -------------------------------------------------- #
##      S130: 6.000 ET-proof appart'n in focusgebied buurten, 2040)           #
## -------------------------------------------------------------------------- #
## --- setup variables of scenario
start_scen <- max(as.numeric(df_scen01_past$jaar)) + 1
end_scen <- max(as.numeric(
            df_scen01_base$jaar[df_scen01_base$scenario == "S130"]))
end_all <- 2040
jrn_pre <- as.numeric(unique(df_scen01_past$jaar))
jrn_scen <- c(start_scen:end_scen)
dur_scen <- length(jrn_scen)
post_exists <- ifelse(end_scen >= end_all, FALSE, TRUE)
jrn_past <- NA
if (post_exists) jrn_post <- c((end_scen+1):end_all)

## -------------------------------------------------------------------------- #
## --- setup nr of woningen per type/buurt to add each year
df_addjr <- df_scen01_base %>% 
  filter(scenario == "S130") %>%
  select(-jaar, -scenario) %>% 
  mutate(add_tot = xtra_tot / length(jrn_scen),
         add_app = xtra_app / length(jrn_scen),
         add_hkw = xtra_hkw / length(jrn_scen),
         add_tsw = xtra_tsw / length(jrn_scen),
         add_twk = xtra_twk / length(jrn_scen),
         add_vst = xtra_vst / length(jrn_scen)) %>% 
  select(-starts_with("xtra_"))

## -------------------------------------------------------------------------- #
## --- add rows to dataframe for scenario S130 (part during-scenario) ------- #
## for-loop over scenario years: use the previous year of observations 
## (38 brt'n) to determine new number of woningen per won_type for each buurt
df_scen01_S130 <- df_scen01_start %>% 
  mutate(scenario = "S130")

for (i in seq_along(jrn_scen)) {
  ## prepare variables
  cur_jr <- as.numeric(jrn_scen[i])
  prev_jr <- cur_jr - 1
  ## make new entries for this year based on the previous year
  df_add <- df_scen01_S130 %>%
    filter(jaar == as.character(prev_jr)) %>% 
    rowwise() %>% 
    mutate(jaar = as.character(cur_jr),
           tot = tot + df_addjr$add_tot[df_addjr$code == code],
           app = app + df_addjr$add_app[df_addjr$code == code],
           hkw = hkw + df_addjr$add_hkw[df_addjr$code == code],
           tsw = tsw + df_addjr$add_tsw[df_addjr$code == code],
           twk = twk + df_addjr$add_twk[df_addjr$code == code],
           vst = vst + df_addjr$add_vst[df_addjr$code == code]) %>% 
    ungroup()
  df_scen01_S130 <- bind_rows(df_scen01_S130, df_add)
}

## -------------------------------------------------------------------------- #
## --- add rows to dataframe for scenario S130 (part post-scenario) --------- #
## --- keep the number of woningen per won_type the same (no more building) 
if (post_exists) {
  for (i in seq_along(jrn_post)) {
    ## prepare variables
    cur_jr <- as.numeric(jrn_post[i])
    prev_jr <- cur_jr - 1
    ## make new entries for this year based on the previous year
    df_add <- df_scen01_S130 %>%
      filter(jaar == as.character(prev_jr)) %>% 
      mutate(jaar = as.character(cur_jr))
    df_scen01_S130 <- bind_rows(df_scen01_S130, df_add)
  }
}

df_scen01_S130 <- df_scen01_S130 %>% 
  select(code, jaar, everything()) %>%
  arrange(code, jaar) %>% 
  mutate(tot = round(tot, digits = 0),
         app = round(app, digits = 0),
         hkw = round(hkw, digits = 0),
         tsw = round(tsw, digits = 0),
         twk = round(twk, digits = 0),
         vst = round(vst, digits = 0))

sum(df_scen01_S130$tot[df_scen01_S130$jaar == "2040"])
sum(df_scen01_S130$app[df_scen01_S130$jaar == "2040"])
sum(df_scen01_S130$vst[df_scen01_S130$jaar == "2040"])

```

```{r comb_scen}
#| label: combine scenarios
#| include: false

## -------------------------------------------------------------------------- #
## ---- Combine all scenarios into one file   ------------------------------- #
## -------------------------------------------------------------------------- #
df_scen01_won <- df_scen01_S100 %>% 
  bind_rows(df_scen01_S130) %>% 
  select(jaar, code, scenario, app, tsw, hkw, twk, vst, tot) %>% 
  rename(nr_app = app,
         nr_hkw = hkw,
         nr_tot = tot,
         nr_tsw = tsw,
         nr_twk = twk,
         nr_vst = vst)

## -------------------------------------------------------------------------- #
## ---- Aggregate data per year and per buurt ------------------------------- #
## -------------------------------------------------------------------------- #
## ---- Aggregate data per year --------------------------------------------- #
df_jr_won <- df_scen01_won %>% 
  group_by(scenario, jaar) %>% 
  summarise(nr_app = sum(nr_app),
            nr_hkw = sum(nr_hkw),
            nr_won = sum(nr_tot),
            nr_tsw = sum(nr_tsw),
            nr_twk = sum(nr_twk),
            nr_vst = sum(nr_vst)) %>% 
  ungroup()

df_2040_won <- df_jr_won %>% 
  filter(jaar == end_all)

## -------------------------------------------------------------------------- #
## -- Aanvullen woningen file ----------------------------------------------- #
##      gem_el_won (left_join df_ev_past_tmp)                                 #
##      tot_el_won (calculate: nr_won * gem_el_won)                           #
##      tot_el_auto (left_join df_auto)                                       #
##      @@@@                                                                  #
## -------------------------------------------------------------------------- #
## --- setup file voor 2010:2024 om aan te vullen met alle variabelen ------- #
df_scen01_won_wt <- df_scen01_won %>%     ## longer: nr_won per jr/brt/won_type
  pivot_longer(starts_with("nr_"), 
               names_to = "won_type", names_prefix = "nr_",
               values_to = "nr_won")

df_scen01_won_past <- df_scen01_won_wt %>%     ## take all CBS-registered years
  filter(as.numeric(jaar) < start_scen)

## -------------------------------------------------------------------------- #
## --- input file voor 2010:2024 aanvullen met gemeten gem_el_won  ---------- #
df_past_2bjoined <- df_scen01_past %>%
  select(jaar, code, buurt, won_type, 
         gem_el_won, tot_el_won, perc_won,
         nr_auto_bs, nr_auto_el, nr_auto_tot, nr_lp,
         focus, focusnaam, congestie, warmtevisie,
         area, area_perc, area_foc, area_perc_foc) %>% 
  mutate(won_type = case_when(str_detect(won_type, "appa") ~ "app",
                              str_detect(won_type, "hoek") ~ "hkw",
                              str_detect(won_type, "tussen") ~ "tsw",
                              str_detect(won_type, "twee") ~ "twk",
                              str_detect(won_type, "vrij") ~ "vst",
                              str_detect(won_type, "totaal") ~ "tot",
                              TRUE ~ "ovg"))

df_scen01_details_past <- df_scen01_won_past %>%
  left_join(df_past_2bjoined) %>% 
  rename(fct_won = perc_won) %>% 
  select(-nr_auto_bs, -nr_auto_el, -nr_auto_tot, -nr_lp)

rm(df_past_2bjoined)                           ## remove intermediate dataframe

## -------------------------------------------------------------------------- #
## NB. LAATSTE 'GEMETEN' TOT_EL_WON OPSLAAN (PER BUURT, SCENARIO, WON_TYPE) - #
## --- dit is nodig omdat we voor de toekomst (nu: 2022 en verder), alleen    #
## --- beng-womingen gaan bouwen, met veel hoger gem_el_won. We moeten dus de #
## --- bestaande woningvoorraad met de oude gem_el_won bewaren en alleen      #
## --- nieuwe woningen tegen het hogere beng-gemiddelde berekenen             #
## --- i.e. trek van het nieuwe tot_el_won steeds het tot_el_won van het      #
## --- laatste meetjaar af !                                                  #
## -------------------------------------------------------------------------- #
df_tot_el_msrjr <- df_scen01_details_past %>% 
  filter(jaar == msr_jr) %>%      ## msr_jr: laatste jaar waarover gemeten is #
  select(code, scenario, won_type, nr_won, tot_el_won) %>% 
  rename(nr_won_measured = nr_won,
         tot_el_won_measured = tot_el_won)

## -------------------------------------------------------------------------- #
## --- input file voor 2025:2040 aanvullen met alle variabelen  -- ---------- #
## -------------------------------------------------------------------------- #
df_scen01_won_fut <- df_scen01_won_wt %>% 
  filter(as.numeric(jaar) >= start_scen)

## -------------------------------------------------------------------------- #
## --- adds variabelen: gem_el voor warmtenet vs. warmtepomp per woningtype - #
lut_beng_2bjoined <- lut_beng %>% 
  select(won_type, gem_el_beng_wnet, gem_el_beng_wpomp) %>%
  rename(el_wn = gem_el_beng_wnet,
         el_wp = gem_el_beng_wpomp) %>% 
  pivot_longer(starts_with("el_"),
               names_to = "warmtevisie", names_prefix = "el_",
               values_to = "gem_el_won")

## -------------------------------------------------------------------------- #
## --- input file voor 2025:2040 aanvullen met 2bjoined variabelen  --------- #
df_scen01_details_fut <- df_scen01_won_fut %>% 
  filter(as.numeric(jaar) >= start_scen) %>%            ## hadden we al gedaan?
  ## even warmtevisie joinen, om de join met lut_beng mogelijk te maken    -- #
  left_join(df_area_cur_2bjoined[,c(2,4)], by = "code") %>% 
  left_join(lut_beng_2bjoined,                        ## add jr.gem el.verbruik
            by = c("won_type", "warmtevisie")) %>% 
  ## calc gewogen gemiddeld el.verbruik over alle woning types heen  -------- #
  rename(nr = nr_won,
         el = gem_el_won) %>% 
  pivot_wider(names_from = won_type, values_from = c(nr, el)) %>% 
  mutate(el_tot = ((nr_app * el_app) + (nr_hkw * el_hkw) + (nr_tsw * el_tsw) + 
        (nr_twk * el_twk) + (nr_vst * el_vst)) / nr_tot) %>%
  pivot_longer(cols = c(starts_with("nr_"), starts_with("el_")), 
               names_to = c("soort", "won_type"), names_sep = "_",
               values_to = c("waarde")) %>%
  pivot_wider(names_from = soort, values_from = waarde) %>% 
  rename(nr_won = nr,
         gem_el_won = el) %>% 
  select(-warmtevisie) %>%   ## warmtevisie niet meer nodig, joins later weer #
  ## correctie op tot_el_won begin  ----------------------------------------- #
  ## nu gaan we tot_el_won berekenen, hierbij moeten we corrigeren voor de    #
  ## bestaande woningvoorraad met het veel lagere gem_el_won, anders gaan we  #
  ## ook de bestaande woningvoorraad meetellen in de tot_el_won tegen de      #
  ## hogere beng-gemiddelden                                                  #
  left_join(df_tot_el_msrjr) %>% 
  mutate(tot_el_won_add = (nr_won - nr_won_measured) * gem_el_won) %>%
  mutate(tot_el_won = tot_el_won_add + 
          ifelse(is.na(tot_el_won_measured), 0, tot_el_won_measured)) %>%
  select(-tot_el_won_measured, -nr_won_measured, -tot_el_won_add) %>% 
  ## correctie op tot_el_won einde  ----------------------------------------- #
  group_by(jaar, scenario) %>% 
  mutate(fct_won = 2 * nr_won / sum(nr_won)) %>% 
  ungroup() %>% 
  left_join(df_area_cur_2bjoined, by = "code")        ## add data area en buurt

rm(df_area_cur_2bjoined, lut_beng_2bjoined)    ## remove intermediate dataframe

## -------------------------------------------------------------------------- #
## --- combine files from 2004:2024 with 2025:2040  ------------------------- #
## -------------------------------------------------------------------------- #
df_scen01_details_tmp <- df_scen01_details_past %>% 
  bind_rows(df_scen01_details_fut)   ## werkt ook als kolommen anders ingedeeld

## -------------------------------------------------------------------------- #
## --- setup mobiliteitsvariabelen: nr. autos el, bs, totaal ---------------- #
lut_mob <- df_ab_all_gem %>%             ## table jaar vs. factor elektr. autos
#  filter(as.numeric(jaar) >= start_scen) %>%  ## ga ik ook de past jaren doen?
  select(jaar, starts_with("nr_")) %>% 
  mutate(fct_el = nr_el / nr_tot,
         fct_bs = nr_bs / nr_tot,
         fct_lp = nr_lp / nr_el) %>% 
  select(jaar, starts_with("fct_"))

## table autobezit per won_type (CBS: gem AB per Huishouden = 0.6 !!)
lut_ab_wt <- data.frame(won_type = character(),
                       gem_ab_wt = numeric(),
                       stringsAsFactors = FALSE)
lut_ab_wt[1,] <- c("app", 0.3)                                      ## aannames
lut_ab_wt[2,] <- c("tsw", 0.85)
lut_ab_wt[3,] <- c("hkw", 0.85)
lut_ab_wt[4,] <- c("twk", 1.2)
lut_ab_wt[5,] <- c("vst", 1.5)
lut_ab_wt[6,] <- c("ovg", 1)
lut_ab_wt[7,] <- c("tot", 0.6)
lut_ab_wt$gem_ab_wt <- as.numeric(lut_ab_wt$gem_ab_wt)

df_auto_2bjoined_wt <- df_scen01_won_wt %>%        ## nr_won van 2022 tot 2040
  left_join(lut_mob, by = "jaar") %>%              ## adds factor elektr.autos
  left_join(lut_ab_wt, by = "won_type") %>%        ## adds gem.auto's/won_type
  mutate(nr_auto_tot = nr_won * gem_ab_wt,
         nr_auto_el = nr_auto_tot * fct_el,
         nr_auto_bs = nr_auto_tot * fct_bs,
         nr_lp = nr_auto_el * fct_lp)

df_auto_corr_totalen <- df_auto_2bjoined_wt %>%    ## correct won_type; totaal
  filter(won_type != "tot") %>% 
  group_by(jaar, code, scenario) %>% 
  summarise(nr_auto_tot = sum(nr_auto_tot),
            nr_auto_el = sum(nr_auto_el),
            nr_auto_bs = sum(nr_auto_bs),
            nr_lp = sum(nr_lp)) %>% 
  ungroup() %>% 
  mutate(won_type = "tot") %>% 
  select(jaar, code, scenario, won_type, nr_auto_tot, nr_auto_bs, nr_auto_el, nr_lp)

df_auto_2bjoined_wt <- df_auto_2bjoined_wt %>%    ## add correcties to mob-data
  left_join(df_auto_corr_totalen, by = c("jaar", "code", "scenario", "won_type")) %>% 
  mutate(nr_auto_bs = ifelse(won_type != "tot", nr_auto_bs.x, nr_auto_bs.y),
         nr_auto_el = ifelse(won_type != "tot", nr_auto_el.x, nr_auto_el.y),
         nr_auto_tot = ifelse(won_type != "tot", nr_auto_tot.x, nr_auto_tot.y),
         nr_lp = ifelse(won_type != "tot", nr_lp.x, nr_lp.y)) %>% 
  select(-ends_with(".x"), -ends_with(".y"), -nr_won) %>% 
  select(jaar, code, scenario, won_type, starts_with("nr_"))

## -------------------------------------------------------------------------- #
## --- combine mobiliteits-data voor 2010:2040 ------------------------------ #
df_scen01_details <- df_scen01_details_tmp %>% 
  left_join(df_auto_2bjoined_wt,                         ## add data mobiliteit
            by = c("jaar", "code", "scenario", "won_type")) %>% 
  mutate(tot_el_auto = nr_auto_el * auto_ev_jr,
         tot_el = tot_el_won + tot_el_auto) %>% 
  select(jaar, code, buurt, scenario, won_type,
         nr_won, gem_el_won, tot_el_won,
         nr_auto_bs, nr_auto_el, nr_auto_tot, nr_lp, tot_el_auto, tot_el,
         focus, congestie, warmtevisie,
         area, area_perc, area_foc, area_perc_foc, fct_won)

rm(df_scen01_details_tmp,                     ## remove intermediate dataframes
   df_auto_2bjoined_wt, df_auto_corr_totalen)

## -------------------------------------------------------------------------- #
## --- Add variables to sf_brt (buurten shape file) 2021 en 2040 ------------ #
## -------------------------------------------------------------------------- #
sf_brt_details <- sf_brt

vars_id <- c( "jaar", "code", "buurt", "scenario", "won_type")
vars_brt <- c("focus", "congestie", "warmtevisie",
              "area", "area_perc", "area_foc", "area_perc_foc")
vars_scen <- c("nr_won", "fct_won", "gem_el_won", 
              "nr_auto_bs", "nr_auto_el", "nr_auto_tot", "nr_lp",
              "tot_el_won", "tot_el_auto", "tot_el")

## --- Add buurt variables to sf_brt (buurten shape file)  ------------------ #
## -------------------------------------------------------------------------- #
df_scen01_brtvars <- df_scen01_details %>% 
  filter(jaar == msr_jr,
         scenario == "S100",
         won_type == "tot") %>% 
  select(code, any_of(vars_brt)) %>% 
  select(-area)                                  ## already present in sf_brt #
sf_brt_details <- sf_brt_details %>% 
  left_join(df_scen01_brtvars, by = c("code" = "code"))

## --- Add scenario variables to sf_brt (buurten shape file)  --------------- #
## -------------------------------------------------------------------------- #
df_scen01_scenvars <- df_scen01_details %>%
  select(-buurt, -any_of(vars_brt)) %>% 
  filter(jaar == msr_jr | jaar == end_scen) %>%          ## only 2024 en 2040 #
  filter((jaar == msr_jr & scenario == "S100") | (jaar == end_scen)) %>%  ## only S100 for 2021
  mutate(scenario = ifelse(jaar == msr_jr, "cur", scenario)) %>% 
  select(-jaar) %>% 
  pivot_wider(names_from = c(scenario, won_type),
              names_glue = "{scenario}_{won_type}_{.value}",
              values_from = any_of(vars_scen))
sf_brt_details <- sf_brt_details %>% 
  left_join(df_scen01_scenvars, by = c("code" = "code"))

```

# 1. Basis

```{r section_A1}
#| label: R-code prep A1
#| include: false

## -------------------------------------------------------------------------- #
## ---- Determine most recent year of measured data ------------------------- #
## -------------------------------------------------------------------------- #

```

## Inputs_A.1 {.sidebar}

**A1. Basis op orde**

Deze kaart laat zien:

* de gemeentegrens  
* de buurten  
* de focusbuurten (buurten die we toekennen aan focusgebieden)  

---

## Column A1.1

### Map A11. Basis op orde

```{r map_A11}
#| label: R-code map A11
#| title: "Map A11. Gebiedsgrenzen"

# map
leaflet(sf_brt) %>%
  addProviderTiles(providers$Esri.WorldGrayCanvas) %>% 
  addPolygons(data = sf_gem, group = "gemeentegrens",
    stroke = TRUE, color = "black", weight="0.75",
    fill = FALSE) %>%
  addPolygons(data = sf_brt, group = "buurten",
    stroke = TRUE, color = "brown",
    weight="1", smoothFactor = 0.3,
    fillOpacity = 0.3, fillColor = "gray",
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3, bringToFront = TRUE),
    label = ~paste0(sf_brt$naam),
    popup = ~paste0(sf_brt$naam, "<br>",
                    "- CBS: ", sf_brt$code, "<br>",
                    "- Wijk: ", sf_brt$naam)) %>%
  addPolygons(data = sf_brt_foc, group = "focusbuurten",
    stroke = TRUE, color = "brown",
    weight="1", smoothFactor = 0.3,
    fillOpacity = 0.2, fillColor = "purple",
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3, bringToFront = TRUE),
    label = ~paste0(sf_brt_foc$naam),
    popup = ~paste0(sf_brt_foc$naam, "<br>",
                    "- CBS: ", sf_brt_foc$code, "<br>",
                    "- Wijk: ", sf_brt_foc$naam)) %>%
  addLayersControl(
    baseGroups = c("basemap (ESRI)"),
    overlayGroups = c("gemeentegrens", "buurten", "focusbuurten"),
    options = layersControlOptions(collapsed = FALSE))

```

# 2. 2024

```{r section_A2}
#| label: R-code prep A2
#| include: false

## -------------------------------------------------------------------------- #
## ---- Gather data --------------------------------------------------------- #
## -------------------------------------------------------------------------- #
periode <- c(msr_jr, msr_jr_prev)
df_A2 <- df_scen01_details %>% 
  filter(jaar %in% periode,
         scenario == "S100") %>% 
  group_by(scenario, jaar, won_type) %>% 
  summarise(nr_won = sum(nr_won, na.rm = TRUE),
            gem_el_won = mean(gem_el_won, na.rm = TRUE),
            tot_el_won = sum(tot_el_won, na.rm = TRUE),
            nr_auto_el = sum(nr_auto_el, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE),
            tot_el = sum(tot_el, na.rm = TRUE)) %>% 
  ungroup() %>% 
  select(-scenario)

## -------------------------------------------------------------------------- #
## ---- Samenstellen selector ----------------------------------------------- #
## -------------------------------------------------------------------------- #
# df_ff <- df_scen01_details_fut %>% 
#   filter(won_type == "tot") %>% 
#   select(jaar, code, scenario, tot_el_won, gem_el_won) %>% 
#   arrange(jaar)
## -------------------------------------------------------------------------- #
## ---- Setup details table ------------------------------------------------- #
## -------------------------------------------------------------------------- #

## -------------------------------------------------------------------------- #
## ---- Setup map data ------------------------------------------------------ #
## -------------------------------------------------------------------------- #

## -------------------------------------------------------------------------- #
## create SharedData for CrossTalk ------------------------------------------ #
## -------------------------------------------------------------------------- #

```

## Inputs_A.2 {.sidebar}

**A2. Energieverbruik in `r msr_jr`**  

Bron voor het energieverbruik van woningen is het CBS (Kerncijfers Regio's)

* Totaal: Totaal elektriciteitsverbruik in GWh  
* Gem.: Jaargemiddeld elektriciteitsverbruik in kWh  

Labels van de waardevelden bovenaan rechts:   

* Gele achtergrond: verbruik is hoger dan vorig jaar  
* Blauwe achtergrond: verbruik is lager dan vorig jaar  

---

## Maincol_A.2

### Row A2.1 {height="15%"}

```{r prep_A21}
#| label: R-code prep A21
#| include: false

## Select --------------------------------------------------------------------
df_A21_tot <- df_A2 %>% 
  select(jaar, won_type, tot_el_won, tot_el_auto, tot_el, nr_won) %>%
  filter(won_type == "tot")

df_A21_gem <- df_A2 %>% 
  select(jaar, won_type, gem_el_won, nr_won)

df_A2_nr <- df_A2 %>% 
  filter(jaar == msr_jr) %>% 
  select(won_type, nr_won, nr_auto_el)
nr_won <- prettyNum(df_A2_nr$nr_won[df_A2_nr$won_type == "tot"], 
                    big.mark = ".", decimal.mark = ",")
nr_app <- prettyNum(df_A2_nr$nr_won[df_A2_nr$won_type == "app"],
                    big.mark = ".", decimal.mark = ",")
nr_tsw <- prettyNum(df_A2_nr$nr_won[df_A2_nr$won_type == "tsw"],
                    big.mark = ".", decimal.mark = ",")
nr_hkw <- prettyNum(df_A2_nr$nr_won[df_A2_nr$won_type == "hkw"], 
                    big.mark = ".", decimal.mark = ",")
nr_twk <- prettyNum(df_A2_nr$nr_won[df_A2_nr$won_type == "twk"], 
                    big.mark = ".", decimal.mark = ",")
nr_vst <- prettyNum(df_A2_nr$nr_won[df_A2_nr$won_type == "vst"], 
                    big.mark = ".", decimal.mark = ",")
nr_ovg <- prettyNum(df_A2_nr$nr_won[df_A2_nr$won_type == "ovg"], 
                    big.mark = ".", decimal.mark = ",")
nr_ela <- prettyNum(round(df_A2_nr$nr_auto_el[df_A2_nr$won_type == "tot"], 
                          digits = 0), big.mark = ".", decimal.mark = ",")

```


```{r valueboxes_A21}
#| label: valueboxes_A21

## A21a: Totaal woningen ---------------------------------------------------
waarde <- round(df_A21_tot$tot_el_won[2], digits = 0)
sw_higher <- waarde > df_A21_tot$tot_el_won[1]
waarde <- round(waarde / 1000000, digits = 1)             ## convert to GWh
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Totaal (", nr_won, " woningen)"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("house-door"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21b: Totaal auto's -----------------------------------------------------
waarde <- round(df_A21_tot$tot_el_auto[2], digits = 0)
sw_higher <- waarde > df_A21_tot$tot_el_auto[1]
waarde <- round(waarde / 1000000, digits = 1)              ## convert to GWh
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Totaal (", nr_ela, " auto's)"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("car-front"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21c: Totaal gemeente -----------------------------------------------------
waarde <- round(df_A21_tot$tot_el[2], digits = 0)
sw_higher <- waarde > df_A21_tot$tot_el[1]
waarde <- round(waarde / 1000000, digits = 1)                ## convert to GWh
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Totaal gemeente"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("globe2"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21d: Gem. EV woningen ----------------------------------------------------
v_waarde <- df_A21_gem %>%
  filter(won_type == "tot") %>% 
  select(gem_el_won)
sw_higher <- v_waarde[2,] > v_waarde[1,]
waarde <- round(v_waarde$gem_el_won[2], digits = 0)
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Gem. (", nr_won, " woningen)"),
  value = paste0(waarde, " kWh"),
  showcase = bsicons::bs_icon("house-door"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21e: Gem. EV appartementen -----------------------------------------------
v_waarde <- df_A21_gem %>%
  filter(won_type == "app") %>% 
  select(gem_el_won)
sw_higher <- v_waarde[2,] > v_waarde[1,]
waarde <- round(v_waarde$gem_el_won[2], digits = 0)
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Gem. (", nr_app, " appartementen)"),
  value = paste0(waarde, " kWh"),
  showcase = bsicons::bs_icon("building"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21f: Gem. EV tussenwoningen ----------------------------------------------
v_waarde <- df_A21_gem %>%
  filter(won_type == "tsw") %>% 
  select(gem_el_won)
sw_higher <- v_waarde[2,] > v_waarde[1,]
waarde <- round(v_waarde$gem_el_won[2], digits = 0)
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Gem. (", nr_tsw, " tussenwoningen)"),
  value = paste0(waarde, " kWh"),
  showcase = bsicons::bs_icon("house"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21g: Gem. EV hoekwoningen -----------------------------------------------
v_waarde <- df_A21_gem %>%
  filter(won_type == "hkw") %>% 
  select(gem_el_won)
sw_higher <- v_waarde[2,] > v_waarde[1,]
waarde <- round(v_waarde$gem_el_won[2], digits = 0)
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Gem. (", nr_hkw, " hoekwoningen)"),
  value = paste0(waarde, " kWh"),
  showcase = bsicons::bs_icon("house"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21h: Gem. EV tweekappers ------------------------------------------------
v_waarde <- df_A21_gem %>%
  filter(won_type == "twk") %>% 
  select(gem_el_won)
sw_higher <- v_waarde[2,] > v_waarde[1,]
waarde <- round(v_waarde$gem_el_won[2], digits = 0)
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Gem. (", nr_twk, " tweekappers)"),
  value = paste0(waarde, " kWh"),
  showcase = bsicons::bs_icon("houses"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A21i: Gem. EV vrijstaand ------------------------------------------------
v_waarde <- df_A21_gem %>%
  filter(won_type == "vst") %>% 
  select(gem_el_won)
sw_higher <- v_waarde[2,] > v_waarde[1,]
waarde <- round(v_waarde$gem_el_won[2], digits = 0)
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Gem. (", nr_vst, " vrijstaand)"),
  value = paste0(waarde, " kWh"),
  showcase = bsicons::bs_icon("house-add"),
  theme = ifelse(sw_higher, "warning", "primary")
)

```

### Row A2.2 {height=65%}

```{r section_A22}
#| label: R-code prep A22
#| include: false

## -------------------------------------------------------------------------- #
## klaarzetten dataframes rond elektriciteitsverbruik ----------------------- #
## -------------------------------------------------------------------------- #
## --- Data per woningtype in 2024 ------------------------------------------ #
sf_A22 <- sf_brt_details 
sf_A22 <- sf_A22 %>% 
  select(code, naam, cur_tot_gem_el_won, cur_tot_tot_el_won) %>%
  rename(gem_el_won = cur_tot_gem_el_won,
         tot_el_won = cur_tot_tot_el_won)

df_A22 <- df_scen01_details %>% 
  filter(as.numeric(jaar) %in% jrn_pre,
         scenario == "S100") %>% 
  select(jaar, code, won_type, nr_won, gem_el_won, tot_el_won, tot_el_auto) %>% 
  group_by(jaar, won_type) %>% 
  summarise(nr_won = sum(nr_won, na.rm = TRUE),
            tot_el_won = sum(tot_el_won, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(gem_el_won = tot_el_won / nr_won) %>%
  select(jaar, won_type, gem_el_won, tot_el_won, tot_el_auto) %>% 
  pivot_longer(cols = c(gem_el_won, tot_el_won, tot_el_auto),
               names_to = "soort", values_to = "waarde") %>% 
  mutate(won_type = as.factor(won_type),
         soort = as.factor(soort),
         jaar = as.numeric(jaar))

```

#### Map A221: Jaargemiddeld elektriciteitsverbruik per buurt

```{r Map_A221}
#| label: R-code map A221
#| title: "Map A221. Gemiddeld elektriciteitsverbruik per buurt (2024)"

# Create a function that chooses a color palette and assigns it to the values
pal <- colorNumeric(
  palette = "YlOrRd",
  domain = sf_A22$gem_el_won)

leaflet(sf_A22) %>%
  addTiles() %>%
  addPolygons(data = sf_A22, group = "buurten",
              stroke = TRUE, color = "red",
              weight="1", smoothFactor = 0.3, fillOpacity = 0.7,
              fillColor = ~pal(sf_A22$gem_el_won),
              highlight = highlightOptions(weight = 2, color = "red",
                                           fillOpacity = 0.3,
                                           bringToFront = TRUE),
              label = ~paste0(sf_A22$naam),
              popup = ~paste0(sf_A22$naam, "<br>",
                               "- CBS-code: ", sf_A22$code, "<br>",
                               "- Totaal EV: ", sf_A22$tot_el_won, "<br>",
                               "- EV per Woning: ", sf_A22$gem_el_won))

```

#### Map A222: Totaal elektriciteitsverbruik per buurt

```{r Map_A222}
#| label: R-code map A222
#| title: "Map A222. Totaal elektriciteitsverbruik per buurt (2024)"

pal <- colorNumeric(
  palette = "YlOrRd",
  domain = sf_A22$tot_el_won)

leaflet(sf_A22) %>%
  addTiles() %>%
  addPolygons(data = sf_A22, group = "buurten",
              stroke = TRUE, color = "red",
              weight="1", smoothFactor = 0.3, fillOpacity = 0.7,
              fillColor = ~pal(sf_A22$tot_el_won),
              highlight = highlightOptions(weight = 2, color = "red",
                                           fillOpacity = 0.3,
                                           bringToFront = TRUE),
              label = ~paste0(sf_A22$naam),
              popup = ~paste0(sf_A22$naam, "<br>",
                               "- CBS-code: ", sf_A22$code, "<br>",
                               "- Totaal EV: ", sf_A22$tot_el_won, "<br>",
                               "- EV per Woning: ", sf_A22$gem_el_won))

```

### Row A2.3 {height="20%"}

```{r plot_A231}
#| label: R-code plot A231
#| title: "Plot A231. Gemiddeld EV Woningen (2004-2024)"
#| echo: false
#| warning: false
#| message: false

## #| fig-width: 6
## #| fig-height: 8

ggplot(df_A22[df_A22$soort == "gem_el_won",],
       aes(x = jaar, y = waarde, group = won_type, color = won_type)) +
  geom_line() + 
  labs(y = "kWh") +
  scale_y_continuous(labels = scales::comma)

```


```{r plot_A232}
#| label: R-code plot A232
#| title: "Plot A232. Totaal EV Woningen (2004-2024)"
#| echo: false
#| warning: false
#| message: false

ggplot(df_A22[df_A22$soort == "tot_el_won",],
       aes(x = jaar, y = waarde/1000000, group = won_type, color = won_type)) +
  geom_line() + 
  labs(y = "GWh") +
  scale_y_continuous(labels = scales::comma)

```

```{r plot_A233}
#| label: R-code plot A233
#| title: "Plot A233. Totaal EV Auto's (2004-2024)"
#| echo: false
#| warning: false
#| message: false

## #| fig-width: 6
## #| fig-height: 8

ggplot(df_A22[df_A22$soort == "tot_el_auto",],
       aes(x = jaar, y = waarde/1000000, group = won_type, color = won_type)) +
  geom_line() + 
  labs(y = "GWh") +
  scale_y_continuous(labels = scales::comma)

```


# 3. Scenarios

```{r section_A3}
#| label: R-code prep A3
#| include: false

## -------------------------------------------------------------------------- #
## ---- Samenstellen table met totalen per scenario (2024 & 2040) ----------- #
## -------------------------------------------------------------------------- #
periode = c("2024", "2040")
df_A32 <- df_scen01_details %>% 
  filter(as.numeric(jaar) %in% periode) %>% 
  select(jaar, code, buurt, scenario, won_type, nr_won, nr_auto_el, nr_lp,
         tot_el_won, tot_el_auto, tot_el) %>% 
  filter(won_type == "tot") %>% 
  group_by(jaar, scenario) %>% 
  summarise(nr_won = sum(nr_won, na.rm = TRUE),
            tot_el_won = sum(tot_el_won, na.rm = TRUE),
            nr_auto_el = sum(nr_auto_el, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE),
            tot_el = sum(tot_el, na.rm = TRUE),
            nr_lp = sum(nr_lp, na.rm = TRUE)) %>% 
  ungroup() %>% 
  select(jaar, scenario, nr_won, nr_auto_el, nr_lp, tot_el_won, tot_el_auto, tot_el)

df_tbl_A32 <- df_A32 %>% 
  mutate(GWh_woningen = tot_el_won / 1000000,
         GWh_autos = tot_el_auto / 1000000,
         GWh_totaal = tot_el / 1000000) %>%
  select(-tot_el_won, -tot_el_auto, -tot_el) %>%
  rename(aantal_woningen = nr_won,
         aantal_elektr_autos = nr_auto_el,
         aantal_laadpalen = nr_lp) %>% 
  pivot_longer(cols = -c(scenario, jaar), 
               names_to = "type", values_to = "waarde") %>% 
  pivot_wider(id_cols = scenario, 
              names_from = c(jaar, type), names_sep = ".", names_prefix = "jr",
              values_from = waarde) %>%  
  mutate(toename.aantal_woningen = jr2040.aantal_woningen - jr2024.aantal_woningen,
         toename.aantal_elektr_autos = jr2040.aantal_elektr_autos - 
           jr2024.aantal_elektr_autos,
         toename.aantal_laadpalen = jr2040.aantal_laadpalen - jr2024.aantal_laadpalen,
         toename.GWh_woningen = jr2040.GWh_woningen - jr2024.GWh_woningen,
         toename.GWh_autos = jr2040.GWh_autos - jr2024.GWh_autos,
         toename.GWh_totaal = jr2040.GWh_totaal - jr2024.GWh_totaal) %>% 
  pivot_longer(cols = -c(scenario),
               names_to = c("jaar", "type"), names_sep = "\\.",
               values_to = "waarde") %>% 
  mutate(jaar = str_remove(jaar, "jr")) %>% 
  pivot_wider(id_cols = c(jaar, type),
              names_from = scenario,
              values_from = waarde) %>% 
  select(jaar, type, S100, S130) %>% 
## prepare table with display controls
  mutate(seq = ifelse(jaar == "2024", 1, 
                      ifelse(jaar == "2040", 2, 3))) %>% 
  mutate(suppress = ifelse(jaar == lag(jaar), 1, 0),
         suppress = ifelse(is.na(suppress), 0, suppress))

## -------------------------------------------------------------------------- #
## ---- Tabel voor sidebar met BENG-aannames -------------------------------- #
## -------------------------------------------------------------------------- #
df_tbl_A31 <- lut_beng %>% 
  select(won_type, gem_el_won, gem_el_beng_wnet, gem_el_beng_wpomp) %>% 
  rename(type = won_type,
         huidig = gem_el_won,
         w.pomp = gem_el_beng_wpomp,
         w.net = gem_el_beng_wnet)

## -------------------------------------------------------------------------- #
## create SharedData for CrossTalk ------------------------------------------ #
## -------------------------------------------------------------------------- #
# share_tbl_A31 <- SharedData$new(df_tbl_A31, key = ~type, group = "A3")
share_tbl_A32 <- SharedData$new(df_tbl_A32, key = ~type, group = "A3")
# share_map_A32 <- SharedData$new(df_map_A32, key = ~dos_id, group = "A3")

```


## Inputs_A.3 {.sidebar}
  
**A3. Scenarios**  

<font size="1em">

Scenario-berekeningen rond de belasting van het electriciteitsnetwerk als consequentie van de woningbouw-opgave conform de twee scenario's in de omgevingsvisie Weert 2040.

**Aannames**

Het CBS geeft aan dat het gemiddeld autobezit per huishouden in de Randstad **0.6** is.  Tevens heeft PWC voor het Rijk een onderzoek gedaan naar het verwachte aantal elektrische auto's in 2050. Deze gegevens zijn de basis geweest om het aantal elektrische auto's te prognotiseren.

Alle nieuwe te bouwen woningen zijn "bijna energieneutrale woningen" (BENG-woning). Hieronder is een tabel weergegeven met het aangenomen jaargemiddeld elektr.verbruik per woningtype, rekening houdend met het type warmtevoorziening vanuit de warmtevisie.

De aanname is gebaseerd op de wettelijke eis dat BENG woningen een maximaal elektriciteitsverbruik hebben van 76 kWh/m2 (bouw-ervaring leert dat dit eerder op 50 kWh/m2 ligt). Als het gemiddelde woningoppervlakte 71.45 m2 is dan resulteert dit in een maximaal elektriciteitsverbruik van 5430 kWh per jaar.

</font>

---

```{r}
#| label: R-code filter A3b

filter_checkbox("A3", "Type meting", share_tbl_A32, ~type,
                 inline = FALSE)

```


## Column A3.1 {data-width=60%}

### Table A31a. Overzichtstabel scenarios (2024 versus 2040) {height=60%}

```{r table_A31a}
#| label: R-code tbl A31a
#| title: "Table A31a. Overzichtstabel scenarios (2024 versus 2040)"

## display table in DT
# NumCols <- 1:ncol(df_tbl_A32)
# share_tbl_A32 %>% 
#   DT::datatable(rownames = FALSE,
#                 options = list(dom = "t", 
#                                class = "compact",
#                                columnDefs = list(
#                                  list(visible = FALSE,
#                                       targets = c(4,5)))
#                                 )) %>%
#   DT::formatStyle(columns = NumCols, 'vertical-align'='top') %>% 
#   DT::formatStyle('seq', target = 'row', 
#                   backgroundColor = 
#                     DT::styleEqual(c(1, 2, 3), 
#                     c('#EEFFFF', '#EEFFEE', '#FDE7E8'))) %>% 
#   DT::formatStyle('jaar', 'suppress', 
#                   color = DT::styleEqual(c(0, 1), c('#000000', '#F2F2F2'))) %>% 
#   DT::formatCurrency(3:5, currency = '', digits = 0, mark = ".")

df_tbl_A32 |> 
  select(-seq, -suppress) |> 
  group_by(jaar) |> 
  gt() |> 
  tab_header(
    title = "Overzicht scenarios (2024, 2040, toename)"
    ) |> 
  cols_label(
    jaar = "Jaar",
    type = "Soort"
    ) |> 
  cols_add(dec_digits = c(0, 0, 0, 2, 2, 2,
                          0, 0, 0, 2, 2, 2,
                          0, 0, 0, 2, 2, 2)
          ) |>
  fmt_number(
    columns = c(S100, S130),
    decimals = from_column(column = "dec_digits"),
    sep_mark = ".",
    dec_mark = ",",
    use_seps = TRUE
   ) |>  
  cols_hide(dec_digits) |>
  tab_style(cell_fill("gray"), cells_row_groups())
 
```

### Table A31b. Aanames onder BENG Elektr.verbruik {height=40%}

```{r table_A31b}
#| label: R-code tbl A31b
#| title: "Table A31b. Aannames onder BENG Elektr.verbruik"

# NumCols <- 1:ncol(df_tbl_A31)
# df_tbl_A31 %>% 
#   DT::datatable(rownames = FALSE,
#                 options = list(dom = "t",
#                                bPaginate=FALSE, scrollY = "250px",
#                                select = list(style = 'multiple', items = 'row'),
#                                autoWidth = TRUE, paging=FALSE,
#                                class = "compact",
#                                # headerCallback = DT::JS(
#                                #    "function(thead) {",
#                                #    "  $(thead).css('font-size', '0.7em');",
#                                #    "}" ),
#                                fillContainer = TRUE))

gt(df_tbl_A31) %>%
  tab_header(
    title = "Aannames BENG-waarden per woningtype"
  ) %>%
  cols_label(
    type = "Woningtype",
    huidig = "2024",
    w.pomp = "BENG warmtepomp",
    w.net = "BENG warmtenet"
  ) %>%
  fmt_number(
    columns = c(huidig, w.pomp, w.net),
    decimals = 0,
    use_seps = TRUE
  ) %>%
  tab_spanner(
    label = "Gem. EV (kWh/jaar)",
    columns = c(huidig, w.pomp, w.net)
  ) %>%
  tab_source_note(
    source_note = "*) zie aannames hierboven"
  ) %>%
    tab_options(table.width = pct(100))

```

## Column A3.2 {data-width=40%}

### Plot A32a. Scenario: Ruimt. Ontw.strategie 100% (+4k5 woningen, diverse types)

```{r plot_A32a}
#| label: R-code plot A32a
#| title: "Plot A32a. Scenario: Ruimt. Ontw.strategie 100% (+4k5 woningen, diverse types)"
#| echo: false
#| warning: false
#| message: false

## transform df_scen01_details to fit plot ---------------------------------- #
df_plot_A32 <- df_scen01_details %>% 
  filter(won_type == "tot") %>% 
  mutate(jaar = as.numeric(jaar)) %>% 
  select(jaar, code, scenario, won_type, tot_el_won, tot_el_auto, tot_el) %>%
  group_by(jaar, scenario) %>% 
  summarise(tot_el_won = sum(tot_el_won, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE),
            tot_el = sum(tot_el, na.rm = TRUE)) %>% 
  ungroup() %>% 
  rename(woningen = tot_el_won,
         autos = tot_el_auto,
         totaal = tot_el) %>% 
  pivot_longer(cols = c("woningen", "autos", "totaal"),
               names_to = "type", values_to = "verbruik") %>% 
  mutate(verbruik = verbruik / 1000000)                     ## van kWh naar GWh

## select and display ------------------------------------------------------- #
ggplot(df_plot_A32[df_plot_A32$scenario == "S100",],
       aes(x = jaar, y = verbruik, group = type, color = type)) +
  geom_line() + 
  labs(y = "Totaal verbruik (GWh)")

```

### Plot A32b. Scenario: Ruimt. Ontw.strategie 100% (+6k woningen, appartementen)

```{r plot_A32b}
#| label: R-code plot A32b
#| title: "Plot A32b. Scenario: Ruimt. Ontw.strategie 130% (+6k woningen, appartementen)"
#| echo: false
#| warning: false
#| message: false

## select and display ------------------------------------------------------- #
ggplot(df_plot_A32[df_plot_A32$scenario == "S130",],
       aes(x = jaar, y = verbruik, group = type, color = type)) +
  geom_line() + 
  labs(y = "Totaal verbruik (GWh)")

```


# 4. Congestie

## Inputs_A.4 {.sidebar}
  
**A4. Schaarste aan elektriciteit**  

<font size="1em">

De levering van elektricteit aan woningen en bedrijven neemt toe. Dit wordt vooral veroorzaakt door beperkingen in het elektriciteitsnetwerk. 

De netbeheerders hebben de capaciteit van het elektriciteitsnetwerk in kaart gebracht en deze kaarten zijn openbaar gemaakt. De kaarten zijn te vinden op de website van Netbeheer Nederland (https://www.netbeheernederland.nl/).
Meer specifiek: https://data.partnersinenergie.nl/capaciteitskaart/rnb/afname

De afbeeldingen hiernaast zijn afgeleid van de Capaciteitskaart Netbeheer Nederland en tonen de situatie per begin 2025 in Nederland als geheel en de situatie voor Weert specifiek. Weert komt er nog genadig af, sommige buurten kennen een dreigende transportschaartse en de overige buurten zijn voorlopig 'veilig'.

---

Legenda afbeeldingen links:

```{r picture_A42, echo = F, out.width = '100%'}
#| label: R-code side A4a

knitr::include_graphics(paste0(dir_pic, "Legenda_ES.png"))

```

---

Op de kaart rechts wordt getoond in welke buurten in Den Haag de transportschaarste precies en of dit voor hele buurt geldt of slechts een gedeelte:

Legenda kaart rechts:

```{r picture_A43, echo = F, out.width = '100%'}
#| label: R-code side A4b

knitr::include_graphics(paste0(dir_pic, "Legenda_ESbrt.png"))

```

</font>

---

## Column A4.1 {width=30%}
 
### Pic A41a. Electriciteitsschaarste Nederland

```{r picture_A41a, echo = F, out.width = '100%'}
#| label: R-code pic A41a
#| title: "Pic A41a. Electriciteitsschaarste Nederland"

knitr::include_graphics(paste0(dir_pic, "El_schaarste_NL.png"))

```

### Pic A41b. Electriciteitsschaarste Gemeente

```{r picture_A41b, echo = F, out.width = '100%'}
#| label: R-code pic A41b
#| title: "Pic A41b. Electriciteitsschaarste Gemeente"

knitr::include_graphics(paste0(dir_pic, "El_schaarste_Gem.png"))

```

## Column A4.2 {width=70%}
-----------------------------------------------------------------------

### Map A42. Buurten met en zonder transportschaarste

```{r map_A42}
#| label: R-code map A42
#| title: "Map A42. Buurten met en zonder transportschaarste"

## make shape file specific to this map
sf_A42 <- sf_brt_details
sf_A42 <- sf_A42 %>% 
  select(c(1:23))

# map
leaflet(sf_A42) %>%
  addProviderTiles(providers$Esri.WorldGrayCanvas) %>% 
  addPolygons(data = sf_gem, group = "gemeentegrens",
    stroke = TRUE, color = "black", weight="0.75",
    fill = FALSE) %>%
  addPolygons(data = sf_A42, group = "buurten",
    stroke = TRUE, color = "brown",
    weight = "1", smoothFactor = 0.3,
    fillOpacity = 0.3, 
    fillColor = ~ifelse(sf_A42$congestie == "Ja", "orange",
                        ifelse(sf_A42$congestie == "Nee", "green",
                               "yellow")),
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3, bringToFront = TRUE),
    label = ~paste0(sf_A42$naam),
    popup = ~paste0(sf_A42$naam, "<br>",
                    "- CBS-code: ", sf_A42$code, "<br>")) %>%
  addPolygons(data = sf_brt_foc, group = "focusbuurten",
    stroke = TRUE, color = "brown",
    weight="1", smoothFactor = 0.3,
    fillOpacity = 0.2, fillColor = "purple",
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3, bringToFront = TRUE),
    label = ~paste0(sf_brt_foc$naam),
    popup = ~paste0(sf_brt_foc$naam, "<br>",
                    "- CBS: ", sf_brt_foc$code, "<br>",
                    "- Wijk: ", sf_brt_foc$naam)) %>%
  addLayersControl(
    baseGroups = c("basemap (ESRI)"),
    overlayGroups = c("gemeentegrens", "buurten", "focusbuurten"),
    options = layersControlOptions(collapsed = FALSE))
```


# 5. Netwerk  

```{r section_A5, include=FALSE}
#| label: R-code prep A5
#| title: "A5. Netwerk"

## -------------------------------------------------------------------------- #
## ---- Bepalen van de contour rond de buurten die congestie hebben --------- #
## ---- Daarna congestie-contour tegen sf_lsv / sf_msv leggen om de --------- #
## -----attribuut congestie aan sf_lsv en ls_msv toe te kunnen voegen ------- #
## -------------------------------------------------------------------------- #

## -------------------------------------------------------------------------- #
## contour omn congestie_buurten -------------------------------------------- #
## -------------------------------------------------------------------------- #
sf_cong <- sf_brt_details %>% 
  filter(congestie == "Ja") %>% 
  select(code, naam, congestie, geometry)

sf_cong <- sf_cong %>% 
  group_by(congestie) %>%
  summarise() %>%
  ungroup()

## -------------------------------------------------------------------------- #
## add attribute "congestie" = "Ja" als netwerk intersects met sf_cong ------ #
## -------------------------------------------------------------------------- #
sf_lsv_tmp <- sf_lsv %>% 
  mutate(congestie = ifelse(st_intersects(sf_lsv, sf_cong, sparse = FALSE),
                            "Ja", "Nee"))

sf_msv_tmp <- sf_msv %>% 
  mutate(congestie = ifelse(st_intersects(sf_msv, sf_cong, sparse = FALSE),
                            "Ja", "Nee"))

sf_stat_tmp <- sf_hms %>% 
  bind_rows(sf_mss) |> 
  bind_rows(sf_lss)
sf_stat_tmp <- sf_stat_tmp |>
  mutate(congestie = ifelse(st_intersects(sf_stat_tmp, sf_cong, sparse = FALSE),
                            "Ja", "Nee")) |> 
  mutate(diameter = case_when(
    spannings == "LS" ~ 3,
    spannings == "MS" ~ 6,
    spannings == "HS" ~ 9))

## find the centroid of the linestrings in sf_stat
sf_stat <- sf_stat_tmp %>% 
  mutate(centroid = st_centroid(geometry)) %>% 
  st_drop_geometry() %>% 
  rename(geometry = centroid)

# Calculate centroids
centroids <- st_centroid(sf_stat_tmp)

# Print the centroid sf object
print(centroids)

# To replace the original geometry with the centroids:
st_geometry(sf_stat_tmp) <- st_geometry(centroids)
sf_stat <- sf_stat_tmp
rm(sf_stat_tmp)

## check class of geometry
class(sf_stat$geometry)

```


## Inputs_A.5 {.sidebar}
-----------------------------------------------------------------------
  
**A5. Capaciteit elektriciteitsnetwerk**  

<font size="1em">

De kaart hiernaast laat het elektriciteitsnetwerk zien op de achtergrond van de buurten. 

Legenda

```{r picture_A52, echo = F, out.width = '100%'}
#| label: R-code side A52

knitr::include_graphics(paste0(dir_pic, "Legenda_EVbd.png"))
```

</font>


---


## Column A5.2
-----------------------------------------------------------------------

### Map A52. Overzicht elektriciteitsnetwerk met en zonder transportschaarste

```{r map_A52}
#| label: R-code map A52
#| title: "Map A52. Overzicht elektriciteitsnetwerk met en zonder transportschaarste"

## make shape file specific to this map
sf_A52 <- sf_brt_details
sf_A52 <- sf_A52 %>% 
  select(c(1:23))

# map
leaflet(sf_A52) %>%
  addProviderTiles(providers$Esri.WorldGrayCanvas) %>% 
  addPolylines(data = sf_lsv_tmp, group = "netwerk - laag",
              stroke = TRUE,
              color = ~ifelse(sf_lsv_tmp$congestie == "Nee",
                                  "green", "orange"),
              weight="1", smoothFactor = 0.3, fillOpacity = 0.7,
              fillColor = "White") %>%
  addPolylines(data = sf_msv_tmp, group = "netwerk - midden",
              stroke = TRUE,
              color = ~ifelse(sf_msv_tmp$congestie == "Nee",
                                  "black", "red"),
              weight="2", smoothFactor = 0.3, fillOpacity = 0.7,
              fillColor = "white") %>%
  # addPolylines(data = sf_stat_tmp, group = "stations",
  #             stroke = TRUE,
  #             color = ~ifelse(sf_msv_tmp$congestie == "Nee",
  #                                 "black", "red"),
  #             weight="2", smoothFactor = 0.3, fillOpacity = 0.7,
  #             fillColor = "white") %>%
  addPolygons(data = sf_A52, group = "buurten",
    stroke = TRUE, color = "brown",
    weight = "1", smoothFactor = 0.3,
    fillOpacity = 0.1, fillColor = "gray",
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3, bringToFront = TRUE),
    label = ~paste0(sf_A52$naam),
    popup = ~paste0(sf_A52$naam, "<br>",
                    "- CBS-code: ", sf_A52$code, "<br>")) %>%
  addPolygons(data = sf_brt_foc, group = "focusbuurten",
    stroke = TRUE, color = "brown",
    weight="1", smoothFactor = 0.3,
    fillOpacity = 0.2, fillColor = "purple",
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3, bringToFront = TRUE),
    label = ~paste0(sf_brt_foc$naam),
    popup = ~paste0(sf_brt_foc$naam, "<br>",
                    "- CBS: ", sf_brt_foc$code, "<br>",
                    "- Wijk: ", sf_brt_foc$naam)) %>%
  addCircleMarkers(data = sf_stat, group = "stations",
    stroke = TRUE, color = "brown",
    radius = ~diameter, fillOpacity = 0.2, fillColor = "purple",
    label = ~paste0(sf_stat$spannings, ": ", sf_stat$id,
                    " - congestie: ", sf_stat$congestie)
    ) |> 
  addLayersControl(
    baseGroups = c("basemap (ESRI)"),
    overlayGroups = c("netwerk - laag", "netwerk - midden", "buurten", "focusbuurten", "stations"),
    options = layersControlOptions(collapsed = FALSE))

```

# 6. 2040

```{r section_A6, include=FALSE}
#| label: R-code prep A6
#| include: false

## -------------------------------------------------------------------------- #
## ---- Gather data --------------------------------------------------------- #
## -------------------------------------------------------------------------- #
periode <- c(as.character(end_all))
df_A6 <- df_scen01_details %>% 
  filter(jaar %in% periode,
         won_type == "tot") %>% 
  group_by(scenario, jaar) %>% 
  summarise(tot_el_won = sum(tot_el_won, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE),
            tot_el = sum(tot_el, na.rm = TRUE),
            nr_won = sum(nr_won, na.rm = TRUE),
            nr_auto_el = sum(nr_auto_el, na.rm = TRUE),
            nr_lp = sum(nr_lp, na.rm = TRUE)
            ) %>% 
  ungroup()

## Get values for value boxes ---------------------------------------------
df_A6_nr <- df_A6 %>% 
  select(scenario, tot_el_won, tot_el_auto, nr_won, nr_auto_el, nr_lp)

nr_won_S100 <- round(df_A6_nr$nr_won[df_A6_nr$scenario == "S100"], digits = 0)
nr_won_S130 <- round(df_A6_nr$nr_won[df_A6_nr$scenario == "S130"], digits = 0)
nr_auto_S100 <- round(df_A6_nr$nr_auto_el[df_A6_nr$scenario == "S100"],
                      digits = 0)
nr_auto_S130 <- round(df_A6_nr$nr_auto_el[df_A6_nr$scenario == "S130"], 
                      digits = 0)

## Convert to GWh -------------------------------------------------------------
el_won_S100 <- round(df_A6_nr$tot_el_won[df_A6_nr$scenario == "S100"]/1000000,
                     digits = 1)
el_won_S130 <- round(df_A6_nr$tot_el_won[df_A6_nr$scenario == "S130"]/1000000,
                     digits = 1)
el_auto_S100 <- round(df_A6_nr$tot_el_auto[df_A6_nr$scenario == "S100"]/1000000, 
                      digits = 1)
el_auto_S130 <- round(df_A6_nr$tot_el_auto[df_A6_nr$scenario == "S130"]/1000000, 
                      digits = 1)

el_won_S100 <- prettyNum(el_won_S100, big.mark = ".", decimal.mark = ",")
el_won_S130 <- prettyNum(el_won_S130,big.mark = ".", decimal.mark = ",")
el_auto_S100 <- prettyNum(el_auto_S100, big.mark = ".", decimal.mark = ",")
el_auto_S130 <- prettyNum(el_auto_S130, big.mark = ".", decimal.mark = ",")
nr_won_S100 <- prettyNum(nr_won_S100, big.mark = ".", decimal.mark = ",")
nr_won_S130 <- prettyNum(nr_won_S130,big.mark = ".", decimal.mark = ",")
nr_auto_S100 <- prettyNum(nr_auto_S100, big.mark = ".", decimal.mark = ",")
nr_auto_S130 <- prettyNum(nr_auto_S130, big.mark = ".", decimal.mark = ",")

## -------------------------------------------------------------------------- #
## klaarzetten dataframes rond elektriciteitsverbruik ----------------------- #
## -------------------------------------------------------------------------- #
## --- Data per buurt in 2040 ----------------------------------------------- #
sf_A62 <- sf_brt_details 
sf_A62 <- sf_A62 %>% 
  select(code, naam, S100_tot_tot_el, S130_tot_tot_el, 
         cur_tot_nr_won, S100_tot_nr_won, S130_tot_nr_won) %>%
  rename(S100_el = S100_tot_tot_el,
         S130_el = S130_tot_tot_el,
         cur_nr = cur_tot_nr_won,
         S100_nr = S100_tot_nr_won,
         S130_nr = S130_tot_nr_won,) %>% 
  mutate(S100_add = S100_nr - cur_nr,
         S130_add = S130_nr - cur_nr,
         S100_el = ifelse(is.na(S100_el),0,S100_el),
         S130_el = ifelse(is.na(S130_el),0,S130_el))

## --- Vaststellen cuts in color palette ------------------------------------ #
# Create a function that choose a color palette and assign it to the values
v_cuts <- c(0, 2000000, 4000000, 6000000, 8000000, 10000000, 12000000, 14000000, 16000000)
colorbins_S100 <- colorBin("YlOrRd", domain = sf_A62$S100_el, bins = v_cuts)
colorbins_S130 <- colorBin("YlOrRd", domain = sf_A62$S130_el, bins = v_cuts)

## -------------------------------------------------------------------------- #
## ---- Samenstellen table met totalen per scenario (2040) ------------------ #
## -------------------------------------------------------------------------- #
periode = c("2040")
df_A63 <- df_scen01_details %>% 
  filter(as.numeric(jaar) %in% periode) %>% 
  select(jaar, code, buurt, scenario, won_type, nr_won, nr_auto_el, nr_lp,
         tot_el_won, tot_el_auto, tot_el) %>% 
  filter(won_type == "tot") %>% 
  group_by(jaar, scenario) %>% 
  summarise(nr_won = sum(nr_won, na.rm = TRUE),
            tot_el_won = sum(tot_el_won, na.rm = TRUE),
            nr_auto_el = sum(nr_auto_el, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE),
            tot_el = sum(tot_el, na.rm = TRUE),
            nr_lp = sum(nr_lp, na.rm = TRUE)) %>% 
  ungroup() %>% 
  select(jaar, scenario, nr_won, nr_auto_el, nr_lp, tot_el_won, tot_el_auto, tot_el)

df_tbl_A63 <- df_A63 %>% 
  rename(aantal_woningen = nr_won,
         aantal_elektr_autos = nr_auto_el,
         aantal_laadpalen = nr_lp,
         kWh_woningen = tot_el_won,
         kWh_autos = tot_el_auto,
         kWh_totaal = tot_el) %>% 
  pivot_longer(cols = -c(scenario, jaar), 
               names_to = "type", values_to = "waarde") %>% 
  pivot_wider(names_from = scenario, values_from = waarde) %>%  
  select(-jaar) %>%
  select(type, S100, S130)


## -------------------------------------------------------------------------- #
## create SharedData for CrossTalk ------------------------------------------ #
## -------------------------------------------------------------------------- #

```

## Inputs_A.6 {.sidebar}

**A6. Totaal elektriciteitsverbruik per buurt in 2040**  

<font size="0.8em">

NB. Alle cijfers rond energieverbruik zijn in kWh weergegeven en afgeleid van de scenariobeschrijvingen in de omgevingsvisie.

**Ruimt.Ontw.Strategie (100%)**

* Extra woningen: 4.500  
* Wanneer: 2040  
* Waar: niet in buitengebieden  
* Wat: Diverse woningtypes (cf. buurt-opbouw)  

**Ruimt.Ontw.Strategie (130%)**

* Extra woningen: 6.000  
* Wanneer: 2040  
* Waar: niet in buitengebieden  
* Wat: ET-proof appartementen  

</font>

---

## Col_A61

### Row A61.1 {height=15%}

```{r valueboxes_A611}
#| label: valueboxes_A611
#| title: "Ruimt.Ontw.Strategie 100%"

## A611a: Totaal S100 ---------------------------------------------------
waarde <- el_won_S100
sw_higher <- FALSE
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Woningen (", nr_won_S100, ")"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("house-door"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A611b: Totaal S100 ---------------------------------------------------
waarde <- el_auto_S100
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("El. Auto's (", nr_auto_S100, ")"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("car-front"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A611c: Totaal S100 ---------------------------------------------------
waarde <- round(df_A6$tot_el[df_A6$scenario == "S100"], digits = 0)
waarde <- round(waarde / 1000000, digits = 1)             ## convert to GWh
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Totaal verbruik"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("globe2"),
  theme = ifelse(sw_higher, "warning", "primary")
)

```

### Row A61.2 {height=60%}

```{r Map_A621}
#| label: R-code map A612
#| title: "Ruimtelijke ontwikkelstrategie: 100% scenario (4k5 woningen, diverse types conform buurtprofiel)"

# Create HTML-labels
labels <- sprintf(
  "<strong>%s</strong><br/>Verbruik: %s<br/>Extra won: %s",
  sf_A62$naam,  
  paste0(prettyNum(round(sf_A62$S100_el, digits = -3), big.mark = ".", decimal.mark = ","), " kWh"),
  prettyNum(round(sf_A62$S100_add, digits = 0), big.mark = ".", decimal.mark = ",")) %>%
  lapply(htmltools::HTML)

# Create map
leaflet(sf_A62) %>%
  addTiles() %>%
  ## focusbuurten
  addPolygons(data = sf_brt_foc, group = "focusbuurten",
    stroke = TRUE, color = "brown",
    weight="1", smoothFactor = 0.3,
    fillOpacity = 0.2, fillColor = "purple",
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3, bringToFront = TRUE),
    label = ~paste0(sf_brt_foc$naam),
    popup = ~paste0(sf_brt_foc$naam, "<br>",
                    "- CBS: ", sf_brt_foc$code, "<br>",
                    "- Wijk: ", sf_brt_foc$naam)) %>%
  ## congestie netwerk
  addPolygons(data = sf_A42, group = "congestie",
    stroke = TRUE, color = "brown",
    weight = "1", smoothFactor = 0.3,
    fillOpacity = 0.3, 
    fillColor = ~ifelse(sf_A42$congestie == "Ja", "blue",
                        ifelse(sf_A42$congestie == "Nee", "green",
                               "lightblue")),
    label = ~paste0("Dreigende congestie: ", sf_A42$congestie)) %>%
  ## buurten elektriciteitsverbruik
  addPolygons(data = sf_A62, group = "verbruik",
    stroke = TRUE, color = "red",
    weight="1", smoothFactor = 0.3, fillOpacity = 0.7,
    fillColor = ~colorbins_S100(sf_A62$S100_el),
    highlight = highlightOptions(weight = 2, color = "red",
                                           fillOpacity = 0.3,
                                           bringToFront = TRUE),
    label = ~labels) %>%
  ## layer check-marks
  addLayersControl(
    baseGroups = c("basemap (OSM)"),
    overlayGroups = c("verbruik", "focusbuurten", "congestie"),
    options = layersControlOptions(collapsed = FALSE)
  )

```

### Row A61.3 {height=25%}

```{r plot_A613}
#| label: R-code plot A613

## make a stacked barchart for the number of woningen per woning type 
## for the years from 2024 to 2040
df_plot_A613 <- df_scen01_details %>% 
  filter(won_type != "tot",
         scenario == "S100") %>% 
  filter(jaar %in% as.character(c(msr_jr:end_all))) %>% 
  select(jaar, won_type, nr_won) %>% 
  group_by(jaar, won_type) %>% 
  summarise(nr_won = sum(nr_won, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(jaar = as.integer(jaar)) |> 
  mutate(won_type = as.factor(won_type))

ggplot(df_plot_A613, aes(x = jaar, y = nr_won, fill = won_type)) +
  geom_bar(stat = "identity") +
  labs(x = "Jaar", y = "", fill = "Woningtype") +
  scale_fill_brewer(palette = "Set3") +
  theme_minimal() +
  theme(legend.position = "right") +
  scale_y_continuous(labels = scales::comma) +
  ggtitle("Aantal woningen per type") 

```

## Col_A62

### Row A62.1 {height=15%}

```{r valueboxes_A621}
#| label: valueboxes_A621
#| title: "Ruimt.Ontw.Strategie 130%"

## A621a: Woningen S130 ---------------------------------------------------
waarde <- el_won_S130
sw_higher <- TRUE
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Woningen (", nr_won_S130, ")"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("house-door"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A621b: Auto's S130 ---------------------------------------------------
waarde <- el_auto_S130
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("El. Auto's (", nr_auto_S130, ")"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("car-front"),
  theme = ifelse(sw_higher, "warning", "primary")
)

## A621c: Totaal S130 ---------------------------------------------------
waarde <- round(df_A6$tot_el[df_A6$scenario == "S130"], digits = 0)
waarde <- round(waarde / 1000000, digits = 1)             ## convert to GWh
waarde <- prettyNum(waarde, big.mark = ".", decimal.mark = ",")
value_box(
  title = paste0("Totaal"),
  value = paste0(waarde, " GWh"),
  showcase = bsicons::bs_icon("globe2"),
  theme = ifelse(sw_higher, "warning", "primary")
)

```


### Row A62.2 {height=55%}

```{r Map_A622}
#| label: R-code map A622
#| title: "Ruimtelijke ontwikkelstrategie: 130% scenario (6k woningen, alleen BENG appartementen)"

# Create HTML-labels
labels <- sprintf(
  "<strong>%s</strong><br/>Verbruik: %s<br/>Extra won: %s",
  sf_A62$naam,  
  paste0(prettyNum(round(sf_A62$S130_el, digits = -3), big.mark = ".", decimal.mark = ","), " kWh"),
  prettyNum(round(sf_A62$S130_add, digits = 0), big.mark = ".", decimal.mark = ",")) %>%
  lapply(htmltools::HTML)

# Create map
leaflet(sf_A62) %>%
  addTiles() %>%
  ## focusgebieden
  # addPolygons(data = sf_foc, group = "focusgebieden",
  #   stroke = TRUE, color = "brown",
  #   weight="1", smoothFactor = 0.3, fillOpacity = 0.2, fillColor = "red",
  #   label = ~paste0("Focusgebied: ", sf_foc$naam)) %>%
  ## congestie netwerk
  addPolygons(data = sf_A42, group = "congestie",
    stroke = TRUE, color = "brown",
    weight = "1", smoothFactor = 0.3,
    fillOpacity = 0.3, 
    fillColor = ~ifelse(sf_A42$congestie == "Ja", "blue",
                        ifelse(sf_A42$congestie == "Nee", "green",
                               "lightblue")),
    label = ~paste0("Dreigende congestie: ", sf_A42$congestie)) %>%
  ## buurten elektriciteitsverbruik
  addPolygons(data = sf_A62, group = "verbruik",
              stroke = TRUE, color = "red",
              weight="1", smoothFactor = 0.3, fillOpacity = 0.7,
              fillColor = ~colorbins_S130(sf_A62$S130_el),
              highlight = highlightOptions(weight = 2, color = "red",
                                           fillOpacity = 0.3,
                                           bringToFront = TRUE),
    label = ~labels) %>%
  ## layer check-marks
  addLayersControl(
    baseGroups = c("basemap (OSM)"),
    overlayGroups = c("verbruik", "focusgebieden", "congestie"),
    options = layersControlOptions(collapsed = FALSE)
  )

```

### Row A62.3 {height=30%}

```{r plot_A623}
#| label: R-code plot A623

## make a stacked barchart for the number of woningen per woning type for the years from 2024 to 2040
df_plot_A623 <- df_scen01_details %>% 
  filter(won_type != "tot",
         scenario == "S130") %>% 
  filter(jaar %in% as.character(c(msr_jr:end_all))) %>% 
  select(jaar, won_type, nr_won) %>% 
  group_by(jaar, won_type) %>% 
  summarise(nr_won = sum(nr_won, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(jaar = as.integer(jaar)) |> 
  mutate(won_type = as.factor(won_type))

ggplot(df_plot_A623, aes(x = jaar, y = nr_won, fill = won_type)) +
  geom_bar(stat = "identity") +
  labs(x = "Jaar", y = "", fill = "Woningtype") +
  scale_fill_brewer(palette = "Set3") +
  theme_minimal() +
  theme(legend.position = "right") +
  scale_y_continuous(labels = scales::comma) +
  ggtitle("Aantal woningen per type") 

```

# 7. Overbelasting

```{r section_A7}
#| label: R-code prep A7
#| include: false

## -------------------------------------------------------------------------- #
## ---- Gather data --------------------------------------------------------- #
## -------------------------------------------------------------------------- #
periode <- c(as.character(end_all))
df_A7 <- df_scen01_details %>% 
  filter(jaar %in% periode,
         won_type == "tot") %>% 
  group_by(scenario, jaar) %>% 
  summarise(tot_el_won = sum(tot_el_won, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE),
            tot_el = sum(tot_el, na.rm = TRUE)) %>% 
  ungroup()

## -------------------------------------------------------------------------- #
## klaarzetten dataframes rond elektriciteitsverbruik ----------------------- #
## -------------------------------------------------------------------------- #
## --- Data per buurt in 2040 ----------------------------------------------- #
## AANNAMES NETWERKCAPACITEIT ##
max_el_con <- 1.5       ## max el.verbr. stijging = 50% in buurten met dreiging
max_el_brt <- 2.0   ## max el.verbr. stijging = 100% in buurten zonder dreiging


## Vector met kleuren voor de mate van overschrijding (mvo):
## groen mvo =0 (geen overschrijding), steeds roder voor > 0
# v_kleur <- c("#C5E0B4","#FF0000", "#EF0000","#DF0000","#CF0000",
#              "#BF0000","#AF0000","#9F0000","#8F0000")
v_kleur <- c("#C5E0B4","#FFD9DA", "#FFB3B5","#FF8C8F","#FF666A",
             "#FF454A","#FF0000","#D40002","#A70002")

sf_A71 <- sf_brt_details 
df_A71 <- sf_A71 %>% 
  st_drop_geometry() %>%
  select(code, naam, 
         cur_tot_tot_el, S100_tot_tot_el, S130_tot_tot_el, congestie) %>%
  rename(S100_el = S100_tot_tot_el,
         S130_el = S130_tot_tot_el,
         cur_el = cur_tot_tot_el) %>% 
  mutate(cur_el = ifelse(is.na(cur_el), 0, cur_el),
         S100_el = ifelse(is.na(S100_el), 0, S100_el),
         S130_el = ifelse(is.na(S130_el), 0, S130_el)) %>% 
  mutate(max_el = ifelse(congestie == "Nee", cur_el * max_el_brt,
                                cur_el * max_el_con),
         S100_con = ifelse(S100_el > max_el, TRUE, FALSE),
         S130_con = ifelse(S130_el > max_el, TRUE, FALSE),
         S100_ovs = ifelse(S100_con, S100_el - max_el, 0),
         S130_ovs = ifelse(S130_con, S130_el - max_el, 0)) %>% 
  pivot_longer(cols = -c(code, naam, cur_el, congestie, max_el),
               names_to = c("scenario",".value"), names_sep = "_") %>% 
  mutate(mvo = cut(ovs, breaks = 8, labels = c(1:8)),
         mvo = ifelse(ovs == 0, 0, mvo),
         kleur = v_kleur[mvo + 1])

## -------------------------------------------------------------------------- #
## ---- Samenstellen table met totalen per scenario (2040) ------------------ #
## -------------------------------------------------------------------------- #
df_A72 <- df_A71 %>% 
  group_by(scenario) %>% 
  summarise(cur_el = sum(cur_el, na.rm = TRUE),
            max_el = sum(max_el, na.rm = TRUE),
            el = sum(el, na.rm = TRUE),
            ovs = sum(ovs, na.rm = TRUE),
            nr_con = sum(con, na.rm = TRUE)) %>% 
  ungroup() %>% 
  mutate(cur_el = paste0(prettyNum(round(cur_el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         max_el = paste0(prettyNum(round(max_el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         el =  paste0(prettyNum(round(el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         ovs =  paste0(prettyNum(round(ovs, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         nr_con =  prettyNum(round(nr_con, digits = -0),
                   big.mark = ".", decimal.mark = ",")) %>% 
  rename(`Huidig verbruik` = cur_el,
         `Verbruik in 2040` = el,
         `Maximaal verbruik` = max_el,
         `Overschrijding` = ovs,
         `Buurten met el.gebrek` = nr_con) %>% 
  pivot_longer(cols = -scenario, 
               names_to = "type", values_to = "waarde")


## -------------------------------------------------------------------------- #
## create SharedData for CrossTalk ------------------------------------------ #
## -------------------------------------------------------------------------- #

```

## Inputs_A.7 {.sidebar}

**A7. Totaal elektriciteitsverbruik per buurt in 2040**  

**NB. AANNAMES**

In buurten waar nog **geen** transportschaarste heerst kan het elektriciteitsverbruik met **100%** toenemen

In buurten waar **wel** transportschaarste dreigt kan het elektriciteitsverbruik maar met **50%** toenemen

Next step: overleg met Enexis over de maximale netwerkcapaciteit per buurt in de aankomende jaren

---

```{r}
#| label: R-code side A7
#| include: false


```

## Col_A71

### Row A71.1 {height=70%}

```{r Map_A721}
#| label: R-code map A721
#| title: "Ruimtelijke ontwikkelstrategie: 100% scenario (4k5 woningen, diverse types conform buurtprofiel)"

# Filter scenario data and add to shape file
sf_A71 <- sf_brt_details 
df_A71_2bjoined <- df_A71 %>% 
  filter(scenario == "S100") %>% 
  select(code, cur_el, max_el, el, con, ovs, kleur)

sf_A71 <- sf_A71 %>% 
  left_join(df_A71_2bjoined)

# Create HTML-labels
labels <- sprintf(
  "<strong>%s</strong><br/>Maximaal: %s<br/>Overschrijding: %s",
  sf_A71$naam,  
  paste0(prettyNum(round(sf_A71$max_el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
  paste0(prettyNum(round(sf_A71$ovs, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh")) %>%
  lapply(htmltools::HTML)

# Create map
leaflet(sf_A71) %>%
  addTiles() %>%
  addPolygons(data = sf_A71, group = "verbruik",
    stroke = TRUE, color = "red",
    weight="1", smoothFactor = 0.3, fillOpacity = 0.7,
    fillColor = sf_A71$kleur,
    highlight = highlightOptions(weight = 2, color = "red",
                                           fillOpacity = 0.3,
                                           bringToFront = TRUE),
    label = ~labels)

```


### Row A71.2 {height=30%}

```{r table_A721}
#| label: R-code tbl A721

sc_code <- "S100"

## prepare table for display
df_tbl_A721 <- df_A72 %>% 
  filter(scenario == sc_code) %>% 
  select(-scenario) %>% 
  rename(`S100` = type)

## display table
NumCols <- 1:ncol(df_tbl_A721)

df_tbl_A721 %>% 
  DT::datatable(rownames = FALSE,
                options = list(
                  dom = "t", 
                  bPaginate=FALSE, scrollY = "400px",
                  autoWidth = TRUE, paging=FALSE, 
                  class = "compact",
                  fillContainer = TRUE)) %>%
  DT::formatStyle(columns = NumCols, 'vertical-align'='top')

```

## Col_A72

### Row A72.1 {height=70%}

```{r Map_A722}
#| label: R-code map A722
#| title: "Ruimtelijke ontwikkelstrategie: 130% scenario (6k woningen, alleen BENG appartementen)"

sf_A71 <- sf_brt_details 
df_A71_2bjoined <- df_A71 %>% 
  filter(scenario == "S130") %>% 
  select(code, cur_el, max_el, el, con, ovs, kleur)

sf_A71 <- sf_A71 %>% 
  left_join(df_A71_2bjoined)

# Create HTML-labels
labels <- sprintf(
  "<strong>%s</strong><br/>Maximaal: %s<br/>Overschrijding: %s",
  sf_A71$naam,  
  paste0(prettyNum(round(sf_A71$max_el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
  paste0(prettyNum(round(sf_A71$ovs, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh")) %>%
  lapply(htmltools::HTML)

# Create map
leaflet(sf_A71) %>%
  addTiles() %>%
  addPolygons(data = sf_A71, group = "verbruik",
    stroke = TRUE, color = "red",
    weight="1", smoothFactor = 0.3, fillOpacity = 0.7,
    fillColor = sf_A71$kleur,
    highlight = highlightOptions(weight = 2, color = "red",
                                           fillOpacity = 0.3,
                                           bringToFront = TRUE),
    label = ~labels)

```

### Row A72.2 {height=30%}

```{r table_A722}
#| label: R-code tbl A722

sc_code <- "S130"

## prepare table for display
df_tbl_A722 <- df_A72 %>% 
  filter(scenario == sc_code) %>% 
  select(-scenario) %>% 
  rename(S130 = type)

## display table
NumCols <- 1:ncol(df_tbl_A722)

df_tbl_A722 %>% 
  DT::datatable(rownames = FALSE,
                options = list(
                  dom = "t", 
                  bPaginate=FALSE, scrollY = "400px",
                  autoWidth = TRUE, paging=FALSE, 
                  class = "compact",
                  fillContainer = TRUE)) %>%
  DT::formatStyle(columns = NumCols, 'vertical-align'='top')

```



# 8. Details

```{r section_A8, include=FALSE, warnings=FALSE}
#| label: R-code prep A8

## -------------------------------------------------------------------------- #
## ---- Gather data --------------------------------------------------------- #
## -------------------------------------------------------------------------- #
df_A71_2bjoined <- df_A71 %>% 
  select(code, scenario, max_el, con, ovs, mvo)

df_focus2bjoined <- read_rds(fpath_scen01) %>% 
  select(cbs, focusnaam)

periode <- c("2021", "2040")
periode <- c("2040")
type <- c("tot")
df_tbl_A8 <- df_scen01_details %>% 
  filter(won_type %in% type) %>% 
  filter((jaar == "2024" & scenario == "S100") | jaar == "2040") %>% 
  mutate(scenario = ifelse(jaar == "2024", "Nu", scenario)) %>% 
  select(-starts_with("area"), -fct_won, -nr_auto_bs, -nr_auto_tot,
         -won_type, -jaar) %>% 
  left_join(df_focus2bjoined, by = c("code" = "cbs")) %>% 
  mutate(focus = focusnaam,
         nr_won = prettyNum(round(nr_won, digits = 0), 
                            big.mark = ".", decimal.mark = ","),
         gem_el_won = paste0(prettyNum(round(gem_el_won, digits = 0),
                                       big.mark = ".", decimal.mark = ","), " kWh"),
         tot_el_won = paste0(prettyNum(round(tot_el_won, digits = 0),
                                       big.mark = ".", decimal.mark = ","), " kWh"),
         nr_auto_el = prettyNum(round(nr_auto_el, digits = 0),
                                big.mark = ".", decimal.mark = ","),
         nr_lp = prettyNum(round(nr_lp, digits = 0),
                           big.mark = ".", decimal.mark = ","),
         tot_el_auto = paste0(prettyNum(round(tot_el_auto, digits = 0),
                                        big.mark = ".", decimal.mark = ","), " kWh"),
         tot_el = paste0(prettyNum(round(tot_el, digits = 0),
                                   big.mark = ".", decimal.mark = ","), " kWh")) %>% 
  mutate(warmtevisie = ifelse(warmtevisie == "wp", "warmtepomp", "warmtenet")) %>% 
  left_join(df_A71_2bjoined, by = c("code"= "code", "scenario" = "scenario")) %>% 
  mutate(max_el = prettyNum(round(max_el, digits = 0), 
                            big.mark = ".", decimal.mark = ","),
         con = ifelse(con, "Ja", "Nee"),
         ovs = paste0(prettyNum(round(ovs, digits = 0),
                                   big.mark = ".", decimal.mark = ","), " kWh")) %>% 
  select(buurt, scenario, focus, congestie, warmtevisie,
         nr_won, nr_auto_el, nr_lp,
         gem_el_won, tot_el_won, tot_el_auto, tot_el, max_el, ovs, con, mvo)

## -------------------------------------------------------------------------- #
## create SharedData for CrossTalk ------------------------------------------ #
## -------------------------------------------------------------------------- #
# share_tbl_A8 <- SharedData$new(df_tbl_A8, key = ~type, group = "A8")
share_tbl_A8 <- SharedData$new(df_tbl_A8, key = ~buurt, group = "A8")
# share_tbl_A8_ix <- SharedData$new(df_tbl_A8, key = ~scenario, group = "A8")

```

## Inputs_A.8 {.sidebar}

**A8. Tabel met details**  

<font size="0.8em">

Deze tabel geeft alle details weer:

* scenario: S100 of S130. "Nu" geeft de huidige standen weer.
* focus: naam van focusgebied als deze geldt voor de buurt
* congestie: Of er wel of niet transportschaarste dreigt
* warmtevisie: Buurt wordt met een warmtenet of warmtepomp voorzien
* nr_won: aantal woningen
* nr_auto_el: aantal elektrische auto's
* nr_lp: aantal laadpalen
* gem_el_won: jaargemiddeld elektr. verbruik woningen
* tot_el_won: totaal elektr. verbruik woningen
* tot_el_auto: totaal elektr. verbruik auto's
* tot_el: totaal elektr. verbruik buurt
* max_el: maximale elektr. verbruik (zie aanname boven)
* ovs: elektr. verbruik dat boven maximum uitkomt (kan dus niet worden geleverd)
* con: kent de buurt een elektr. verbruik dat boven maximum het uitkomt
* mvo: mate van overschrijding van het gewenste elektr. verbruik boven het maximum


Met onderstaand selectie-veld kan een specifieke buurt worden geselecteerd:

</font>

---

```{r}
#| label: R-code side A8

# filter checkboxes
# filter_checkbox("A8a", "Scenario", share_tbl_A8_ix, ~scenario,
#                 inline = FALSE)
# # filter_checkbox("A8b", "Woning-type", share_tbl_A8, ~won_type,
# #                 inline = FALSE)
# filter_checkbox("A8c", "Jaar", share_tbl_A8, ~jaar,
#                 inline = FALSE)
filter_select("A8d", "Buurt", share_tbl_A8, ~buurt)

```

## MainCol_A8

```{r prep_A81}
#| label: R-code prep A81

## Select --------------------------------------------------------------------


```


```{r table_A82}
#| label: R-code tbl A82
#| title: "Table A82. Ruimtelijke Ontw.Strategie per buurt"

NumCols <- 1:ncol(df_tbl_A8)

share_tbl_A8 %>%
  DT::datatable(
    filter = "none", rownames = FALSE,
    extensions = c("Buttons"),
    style = "bootstrap", class = "compact", width = "100%",
    callback=JS('$("button.buttons-colvis").css("background","white");
                 $("button.buttons-colvis").css("color","gray");
                 $("button.buttons-pdf").css("background","white");
                 $("button.buttons-pdf").css("color","gray");
                 $("button.buttons-excel").css("background","white");
                 $("button.buttons-excel").css("color","gray");
                 return table;'),
    colnames=c("buurt", "scenario", "focus", "congestie", "warmtevisie",
               "# woningen", "# el.auto", "# laadpalen",
               "jr.gem won", "tot.el. won", "tot.el auto", "tot.el",
               "max.el", "gebrek.el", "gebrek.J/N", "gebrek.mate"),
    options = list(dom = "Bt", deferRender = TRUE,
                   bPaginate=FALSE, scrollY = "650px",
                   fillContainer = TRUE, autoWidth = TRUE, paging=FALSE,
                   headerCallback = DT::JS(
                     "function(thead) {",
                     "  $(thead).css('font-size', '0.7em');",
                     "}" ),
                   buttons = list(I("colvis"), "pdf", "excel"))) %>%
  DT::formatStyle(columns = NumCols, fontSize = '70%') %>%
  DT::formatStyle(columns = NumCols, 'vertical-align'='top') %>%
  DT::formatStyle('scenario', target = 'row', color =
                  DT::styleEqual(c("S100", "S130", "RS"),
                               c('steelblue', 'maroon', 'darkgreen')))

```

# 9. Test

```{r section_A9}
#| label: R-code prep A9
#| include: false

## -------------------------------------------------------------------------- #
## klaarzetten dataframes rond elektriciteitsverbruik ----------------------- #
## -------------------------------------------------------------------------- #
## --- Data voor hele gemeente in 2040 -------------------------------------- #
periode <- c(as.character(end_all))
df_A9 <- df_scen01_details %>% 
  filter(jaar %in% periode,
         won_type == "tot") %>% 
  group_by(scenario, jaar) %>% 
  summarise(tot_el_won = sum(tot_el_won, na.rm = TRUE),
            tot_el_auto = sum(tot_el_auto, na.rm = TRUE),
            tot_el = sum(tot_el, na.rm = TRUE)) %>% 
  ungroup()

## -------------------------------------------------------------------------- #
## --- Data per buurt in 2040 ----------------------------------------------- #
## -------- Klaarzetten DF met buurtgegevens voor joining met sf_brt_details  #
##          in de map A71.1 ------------------------------------------------- #
## -------------------------------------------------------------------------- #
## STEERING THE AVAILABLE ADDITIONAL EV-CAPACITY DEPENDING CONGESTION ------  #
## We willen weten of we een overschrijding van EV-capaciteit krijgen in 2040 #
## Daarvoor hebben we nodig:
## 1) de huidige elektr. capaciteit in de buurt (cur_el)
## 2) de elektr. capaciteit in 2040 (S100_el, S130_el -> scen_el)
## 3) is er sprake van congestie in de buurt (congestie)
## 4) de maximale elektr. capaciteit in de buurt (max_el) gebaseerd op het
##    huidige verbruik (cur_el) en de nog beschikbare additionele capaciteit
## 5) ovs_ind: is het EV in 20240 (scen_el) groter dan max_el?
## 6) ovs: hoeveel elektr. capaciteit is er tekort?
## 7) mvo: mate van overschrijding (0-8) van het tekort
## 8) kleur: kleur voor de mate van overschrijding (mvo) voor de kaart 
##
## Hieronder bouwen een dataframe op met de relevante gegevens voor de kaart
## -------------------------------------------------------------------------- #
## Vector met kleuren voor de mate van overschrijding (mvo):
## groen mvo =0 (geen overschrijding), steeds roder voor > 0
# v_kleur <- c("#C5E0B4","#FF0000", "#EF0000","#DF0000","#CF0000",
#              "#BF0000","#AF0000","#9F0000","#8F0000")
v_kleur <- c("#C5E0B4","#FFD9DA", "#FFB3B5","#FF8C8F","#FF666A",
             "#FF454A","#FF0000","#D40002","#A70002")

## Vector met instellingen voor de filter (10% - 100%). Hiermee kan de user   #
## de mate van extra elektr. capaciteit die beschikbaar is binnen 1) een      #
## netwerk met congestie en 2) een netwwerk zonder congestie                  #
v_cong <- seq(10, 100, by = 10)           ## percentages extra EV met congestie
v_vrij <- seq(10, 100, by = 10)        ## percentages extra EV zonder congestie

## -------------------------------------------------------------------------- #
## Make spatial dataframe with relevant columns for leaflet-map
## -------------------------------------------------------------------------- #
## Make spatial dataframe with relevant columns for leaflet-map

sf_A91 <- sf_brt_details 
df_A91_S100 <- sf_A91 %>% 
  st_drop_geometry() %>%
  select(code, naam, cur_tot_tot_el, S100_tot_tot_el, congestie) %>%
  rename(scen_el = S100_tot_tot_el, 
         cur_el = cur_tot_tot_el) |> 
  replace_na(list(cur_el = 0, scen_el = 0))
         
df_A91_S100 <- df_A91_S100
for (i in seq_along(v_cong)) {
  for (j in seq_along(v_vrij)) {
    col_name <- paste0("pct_", v_cong[i], "_", v_vrij[j])
    df_A91_S100[[col_name]] <- ifelse(df_A91_S100$congestie == "Ja", 
              df_A91_S100$cur_el + df_A91_S100$cur_el * (v_cong[i] / 100),
              df_A91_S100$cur_el + df_A91_S100$cur_el * (v_vrij[j] / 100))
  }  
}

df_A91_2bjoined <- df_A91_S100 |> 
  pivot_longer(cols = -c(code, naam, cur_el, scen_el, congestie),
               names_to = c("pct", "pct_cong", "pct_vrij"), 
               names_sep = "_") |> 
  rename(max_el = value) |> 
  select(code, pct_cong, pct_vrij, naam, congestie, 
          cur_el, scen_el, max_el) |> 
  mutate(pct_cong = as.integer(pct_cong),
         pct_vrij = as.integer(pct_vrij)) |>
  mutate(ovs_ind = ifelse(max_el < scen_el, TRUE, FALSE),
         ovs = ifelse(ovs_ind, scen_el - max_el, 0),
         mvo = cut(ovs, breaks = 8, labels = c(c(1:8))),
         kleur = v_kleur[as.numeric(mvo) + 1])

## -------------------------------------------------------------------------- #
## ---- Combine sf_brt met de verkregen data -------------------------------- #
## ---- This DF acan be filtered using the slider below --------------------- #
sf_A91_S100 <- sf_brt_details |> 
  select (code, geometry) |>
  left_join(df_A91_2bjoined, by = "code") |> 
  mutate(pct_key = paste0(code, "_", pct_cong, "_", pct_vrij)) |>
#  filter(naam == "Laarveld") |> 
  select(pct_key, everything()) 

## -------------------------------------------------------------------------- #
## ---- Samenstellen table met totalen per scenario (2040) ------------------ #
## -------------------------------------------------------------------------- #
df_A92_S100 <- sf_A91_S100 |> 
  st_drop_geometry() |>
  group_by(pct_key, pct_cong, pct_vrij) |>
  summarise(cur_el = sum(cur_el, na.rm = TRUE),
            max_el = sum(max_el, na.rm = TRUE),
            scen_el = sum(scen_el, na.rm = TRUE),
            ovs = sum(ovs, na.rm = TRUE),
            ovs_nr = sum(ovs_ind, na.rm = TRUE)) |> 
  ungroup() |>
  mutate(cur_el = paste0(prettyNum(round(cur_el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         max_el = paste0(prettyNum(round(max_el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         scen_el =  paste0(prettyNum(round(scen_el, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         ovs =  paste0(prettyNum(round(ovs, digits = -3),
                   big.mark = ".", decimal.mark = ","), " kWh"),
         ovs_nr =  prettyNum(round(ovs_nr, digits = -0),
                   big.mark = ".", decimal.mark = ",")) %>% 
  rename(`Huidig verbruik` = cur_el,
         `Verbruik in 2040` = scen_el,
         `Maximaal verbruik` = max_el,
         `Overschrijding` = ovs,
         `Buurten met el.gebrek` = ovs_nr) %>% 
  pivot_longer(cols = -c(pct_key, pct_cong, pct_vrij), 
               names_to = "type", values_to = "waarde")

## -------------------------------------------------------------------------- #
## create SharedData for CrossTalk ------------------------------------------ #
## -------------------------------------------------------------------------- #
## make a dataframe with two columns that each range from 0 to 100
df_keys <- sf_A91_S100 |> 
  select(pct_key, code, naam, pct_cong, pct_vrij) |> 
  st_drop_geometry()
share_keys <- SharedData$new(df_keys, ~pct_key)
share_sf_A91 <- SharedData$new(sf_A91_S100, ~pct_key, 
                                group = share_keys$groupName())
share_df_A92 <- SharedData$new(df_A92_S100, ~pct_key, 
                                group = share_keys$groupName())

```

## Inputs_A.9 {.sidebar}

**A9. Totaal elektriciteitsverbruik per buurt in 2040**  

**NB. AANNAMES**

In buurten waar nog **geen** transportschaarste heerst kan het elektriciteitsverbruik met **100%** toenemen

In buurten waar **wel** transportschaarste dreigt kan het elektriciteitsverbruik maar met **50%** toenemen

Next step: overleg met Enexis over de maximale netwerkcapaciteit per buurt in de aankomende jaren

---

```{r slider_A9}
#| label: R-code side A9
#| title: slider

filter_select("brt", "Buurt", share_keys, ~naam, multiple = FALSE)
filter_select("cong", "Extra capaciteit beschikbaar met congestie", 
                                share_keys, ~pct_cong, multiple = FALSE, )
filter_select("vrij", "Extra capaciteit beschikbaar zonder congestie", 
                                share_keys, ~pct_vrij, multiple = FALSE)
```

## Col_A91

### Row A91.1 {height=70%}

```{r Map_A921}
#| label: R-code map A921
#| title: "Ruimtelijke ontwikkelstrategie: 100% scenario (4k5 woningen, diverse types conform buurtprofiel)"

# Create map
leaflet(share_sf_A91) %>%
  addTiles() %>%
  addPolygons(data = share_sf_A91, group = "verbruik",
    stroke = TRUE, color = "red",
    weight = "1", smoothFactor = 0.3, fillOpacity = 0.7,
    highlight = highlightOptions(weight = 2, color = "black",
                                 fillOpacity = 0.3,
                                 bringToFront = TRUE),
    label = ~paste0("Buurt: ", sf_A91_S100$naam, 
                    "<br/>Huidig: ", 
                     prettyNum(round(sf_A91_S100$cur_el, digits = -3),
                               big.mark = ".", decimal.mark = ","), " kWh",
                     "<br/>2040: ",
                     prettyNum(round(sf_A91_S100$scen_el, digits = -3),
                               big.mark = ".", decimal.mark = ","), " kWh",
                     "<br/>Max: ",
                     prettyNum(round(sf_A91_S100$max_el, digits = -3),
                               big.mark = ".", decimal.mark = ","), " kWh",
                     "<br/>Slider_cong: ", sf_A91_S100$pct_key,
                     "<br/>Congestie: ", sf_A91_S100$congestie),
    # label = ~paste0("Sliders: ", sf_A91_S100$pct_key, " | ", sf_A91_S100$naam),
    fillColor = sf_A91_S100$kleur)

```

### Row A91.2 {height=30%}

```{r table_A912}
#| label: R-code tbl A912
#| title: "Table A912. Ruimtelijke Ontw.Strategie per buurt"
 
## display table
NumCols <- 1:ncol(df_A92_S100)

share_df_A92 %>% 
  DT::datatable(rownames = FALSE,
                options = list(
                  dom = "t", 
                  bPaginate=FALSE, scrollY = "400px",
                  autoWidth = TRUE, paging=FALSE, 
                  class = "compact",
                  fillContainer = TRUE)) %>%
  DT::formatStyle(columns = NumCols, 'vertical-align'='top')

```


